{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Decentralized Geospatial HubThe Decentralized Geospatial Collaborative","text":"<p>Building the decentralized geospatial web and location-based services</p>"},{"location":"#welcome","title":"\ud83d\udc4b Welcome","text":"<p>We focus on research, development, and community building.</p> <p>Our goal is to expand what's possible on with geospatial information on the web. We seek to complement the existing state of the art in GIScience, geospatial technology, and location-based services, and we are actively researching how to build more decentralized geospatial web to improve security, privacy, transparency, trust, and more.</p> <p>Don't know where to start? Check out the following resources:</p>"},{"location":"#table-of-contents","title":"\ud83d\udcd6 Table of contents","text":"<ul> <li>\ud83d\udea2 How to contribute</li> <li>\ud83d\udc85 Development guidelines</li> <li>\ud83d\udcda Documentation guidelines</li> <li>\ud83d\udd2c Research &amp; Context</li> <li>\ud83d\udd00 Flow Diagrams &amp; User journeys</li> <li>\ud83d\ude80 UI Guidelines, Files and Mockups</li> </ul>"},{"location":"#tools-and-applications","title":"Tools and applications","text":"<ul> <li>ipfs-stac Python library</li> <li>Web3 Geo-Dashboard</li> <li>Decentralized Location Logger</li> <li>Astral API</li> <li>Astral SDK</li> </ul>"},{"location":"documentation-guidelines/","title":"How to Author and Build Documentation","text":""},{"location":"documentation-guidelines/#background","title":"Background","text":"<p>The overarching goal of Decentralized Geospatial Collaborative is to research and develop the tooling and applications to be used on top of the decentralized web. Documentation is also apart of that exploration as without good documentation, users are not able to unlock or understand the full potential of decentralization. Therefore, authoring new documentation and improving existing documentation is of great value to the Decentralized Geospatial Collaborative.</p>"},{"location":"documentation-guidelines/#the-documentation-system","title":"The Documentation System","text":"<p>There is a secret that needs to be understood in order to write good software documentation: there isn\u2019t one thing called documentation, there are four.</p> <p>\u2013 Di\u00e1taxis</p> <p>Di\u00e1taxis is a documentation framework where user docs can be arranged into one of four categories:</p> <ul> <li>tutorials</li> <li>how-to guides</li> <li>technical reference</li> <li>explanation</li> </ul> <p>Before you author documentation, I suggest reading Start here - Di\u00e1taxis in five minutes or watching its accompanying video (or even both, if you\u2019re really keen).</p> <p>The key insight is that by breaking content up in this way, each of the four types of documentation only has one job so it can really nail it. Plus, it makes it easier to find what you are looking for.</p>"},{"location":"documentation-guidelines/#building-your-site","title":"Building your site","text":"<p>Our documentation is built using MkDocs with the Material mkdocs theme.</p> <p>To get started, you will need to install MkDocs and the Material theme plugin. You can do this by running the following pip command:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre> <p>Documentation source files are written in Markdown, stored in a directory named <code>docs</code> and configured with a single YAML configuration file. Typically, the configuration file is named <code>mkdocs.yml</code> and is located in the root of the project. If it is not, you can specify the configuration file with the <code>-f</code> flag when running the <code>mkdocs</code> command.</p> <pre><code>mkdocs build -f path/to/mkdocs.yml\n</code></pre> <p>When you run <code>mkdocs build</code>, the documentation is generated as a static site in a directory named <code>site</code>.</p> <p>After the documentation is built, it's recommend that you view the site locally to ensure that it looks as expected. To do this,</p> <pre><code>mkdocs serve\n</code></pre> <p>This will start a local web server that serves the site at <code>http://localhost:8000</code>.</p> <p>Once you are satisfied with the site and have resolved any issues, you can commit the changes and push them to the repository.</p>"},{"location":"documentation-guidelines/#publishing-your-site","title":"Publishing your site","text":"<p>We use GitHub Pages to host our documentation. Github Actions can be used to automatically build and deploy to the <code>gh-pages</code> branch and available at <code>https://&lt;username&gt;.github.io/&lt;repository&gt;</code>.</p> <p>The following resource provides details on how to setup a Github Action to automate the deployment of documentation.</p>"},{"location":"documentation-guidelines/#authoring-workflow","title":"Authoring Workflow","text":"<p>There are several ways to author documentation. The simplest and most straightforward is to author the markdown files directly in the <code>docs</code> directory and ensure that the file is referenced in the <code>nav</code> section of the <code>mkdocs.yml</code> file.</p> <ol> <li>Run <code>mkdocs build</code> to generate the static html files based on the markdown files found in <code>docs</code></li> <li>Run <code>mkdocs serve --open</code> to run a local web server instance that opens the home page into your web browser</li> </ol> <p>For example, if you want to add a new page to the documentation, you would create a new markdown file in the <code>docs</code> directory and reference it in the <code>nav</code> section of the <code>mkdocs.yml</code> file.</p> <pre><code>nav:\n  - Home: index.md\n  - New Page: new-page.md\n</code></pre> <p> Run <code>mkdocs serve --open --clean</code> which will clean the site directory before building the site. This is useful when you want to ensure that the site is built from scratch.</p> <p>For more information on how to author documentation, please refer to the MkDocs documentation.</p>"},{"location":"documentation-guidelines/#formatting-standards","title":"Formatting standards","text":"<p>External links should be opened into a new tab. This can be done by wrapping the link in the following HTML:</p> <pre><code>Clicking me will open the page, &lt;a href=\"https://www.markdownguide.org/hacks/#link-targets\" target=\"_blank\"&gt;Link Targets&lt;/a&gt;, in a new tab.\n</code></pre> <p>which looks like this:</p> <p>Clicking me will open the page, Link Targets, in a new tab.</p>"},{"location":"style-guidelines/","title":"Standard Style Guidelines","text":"<p>This document outlines the general conventions and formats that Decentralized-Geo follows, ensuring consistency across all of our repositories.</p> <p>It may not be the case that a repository follows all of these guidelines. It will be noted in the repository's README if it does not.</p>"},{"location":"style-guidelines/#documenting-code","title":"Documenting Code","text":"<p>We generally follow the Google Style guidelines for commenting and documenting our code. This allows us to generate documentation from our codebase and helps us to maintain a consistent style across all of our repositories. Below are some links to some of the more common languages we use and their respective style guides:</p> <ul> <li>Python</li> <li>The following is an example of Google-style docstrings.</li> <li>JavasScript</li> <li>TypeScript</li> </ul>"},{"location":"style-guidelines/#naming-conventions","title":"Naming Conventions","text":"<p>The following table outlines the different naming conventions we use for different programming languages:</p> Language Functions &amp; Methods Classes Interfaces Namespaces Constants / Globals Python snake_case() PascalCase N/A N/A snake_case / SCREAMING_SNAKE_CASE C# PascalCase() PascalCase PascalCase PascalCase SCREAMING_SNAKE_CASE TypeScript camelCase() PascalCase PascalCase PascalCase SCREAMING_SNAKE_CASE JavaScript camelCase() PascalCase PascalCase PascalCase SCREAMING_SNAKE_CASE <p>Note sure what any of this means? Check out this article to learn more about naming conventions and how they're used.</p> <p>Naming Best Practices:</p> <ul> <li>Avoid object types in names (user_array, email_method CalculatorClass, ReportModule).</li> <li>Prefer naming classes after domain concepts rather than patterns they implement (e.g. Guest vs NullUser, CachedRequest vs RequestDecorator).</li> <li>Name the enumeration parameter the singular of the collection.</li> <li>Name variables, methods, and classes to reveal intent.</li> <li>Treat acronyms as words in names (XmlHttpRequest not XMLHTTPRequest), even if the acronym is the entire name (class Html not class HTML).</li> </ul>"},{"location":"style-guidelines/#general-code-conventions","title":"General Code Conventions","text":"<p>Start reading our code and you'll get the hang of it. We optimize for readability:</p> <ul> <li>End files with a newline.</li> <li>Avoid platform-dependent code:</li> <li>Use path.join() to concatenate filenames.</li> <li>Use os.tmpdir() rather than /tmp when you need to reference the temporary directory.</li> <li>Using a plain return when returning explicitly at the end of a function.</li> <li>Not return null, return undefined, null or undefined</li> <li>We indent using four spaces (equivalent to tab)</li> <li>We ALWAYS put spaces after list items and method parameters ([1, 2, 3], not [1,2,3]), around operators (x += 1, not x+=1), and around hash arrows.</li> <li>Break long lines after 120 characters.</li> <li>Delete trailing whitespace.</li> <li>Order methods so that caller methods are earlier in the file than the methods they call.</li> <li>Order methods so that methods are as close as possible to other methods they call.</li> </ul> <p>This is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.</p>"},{"location":"style-guidelines/#version-control-workflow","title":"Version Control Workflow","text":"<p>We follow the Github Flow methodology for version control management. Changes to a repository represent a \"unit of work\" where every change that's worked on is branched off of <code>main</code>. By \"unit of work\", we mean branches that represent feature development, bug fixes, or other changes that are related to a single issue. Once the work is complete, a pull request is opened and reviewed by at least one other team member before being merged back into <code>main</code>. If the repository uses production specific github actions, changes to <code>main</code> will trigger a build and deployment process.</p>"},{"location":"style-guidelines/#development-standard-operating-procedures","title":"Development Standard Operating Procedures","text":"<p>TODO</p> <p>Add details here outlining a detailed example of how a developer would contribute to a repository following the Github Flow methodology. Reference sources:</p> <ul> <li>pysal SOP</li> <li>Simple contribution steps</li> <li>First Contribution Outline</li> <li>I like how there's detailed outlines for contributions for different gui apps and the command line.</li> <li>STAC FastAPI simple outline </li> </ul>"},{"location":"style-guidelines/#development-environment","title":"Development Environment","text":"<p>TODO</p> <p>Add details here outlining our typical development environment, settings, tools used, etc.</p> <p>We should also include a section on how to set up a development environment for our repositories in order to contribute. Reference sources:</p> <ul> <li>GDAL Development Guides </li> </ul>"},{"location":"contribute/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"contribute/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"contribute/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contribute/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at here.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p>"},{"location":"contribute/contributing-guidelines/","title":"Contributing Guidelines","text":"<p>Pull requests, bug reports, and all other forms of contribution are welcomed and highly encouraged!</p> <p>This guide serves to set clear expectations for everyone involved with the project so that we can improve it together while also creating a welcoming space for everyone to participate. Following these guidelines will help ensure a positive experience for contributors and maintainers.</p>"},{"location":"contribute/contributing-guidelines/#code-of-conduct","title":"Code of Conduct","text":"<p>Please review our Code of Conduct. It is in effect at all times. We expect it to be honored by everyone who contributes to this project. Acting like an jerk will not be tolerated.</p>"},{"location":"contribute/contributing-guidelines/#asking-questions","title":"Asking Questions","text":"<p>See our Support Guide. In short, GitHub issues are not the appropriate place to debug your specific project, but should be reserved for filing bugs and feature requests.</p>"},{"location":"contribute/contributing-guidelines/#opening-an-issue","title":"Opening an Issue","text":"<p>Before creating an issue, check if you are using the latest version of the project. If you are not up-to-date, see if updating fixes your issue first.</p>"},{"location":"contribute/contributing-guidelines/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Review our Security Policy. Do not file a public issue for security vulnerabilities.</p>"},{"location":"contribute/contributing-guidelines/#bug-reports-and-other-issues","title":"Bug Reports and Other Issues","text":"<p>A great way to contribute to the project is to send a detailed issue when you encounter a problem. We always appreciate a well-written, thorough bug report. </p> <p>In short, since you are most likely a developer, provide a ticket that you would like to receive</p> <ul> <li> <p>Review the documentation and Support Guide before opening a new issue.</p> </li> <li> <p>Do not open a duplicate issue! Search through existing issues to see if your issue has previously been reported. If your issue exists, comment with any additional information you have. You may simply note \"I have this problem too\", which helps prioritize the most common problems and requests.</p> </li> <li> <p>Prefer using reactions, not comments, if you simply want to \"+1\" an existing issue.</p> </li> <li> <p>Fully complete the provided issue template. The bug report template requests all the information we need to quickly and efficiently address your issue. Be clear, concise, and descriptive. Provide as much information as you can, including steps to reproduce, stack traces, compiler errors, library versions, OS versions, and screenshots (if applicable).</p> </li> <li> <p>Use GitHub-flavored Markdown. Especially put code blocks and console outputs in backticks (```). This improves readability.</p> </li> </ul>"},{"location":"contribute/contributing-guidelines/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome! While we will consider all requests, we cannot guarantee your request will be accepted. We want to avoid feature creep. Your idea may be great, but also out-of-scope for the project. If accepted, we cannot make any commitments regarding the timeline for implementation and release. However, you are welcome to submit a pull request to help!</p> <ul> <li> <p>Do not open a duplicate feature request. Search for existing feature requests first. If you find your feature (or one very similar) previously requested, comment on that issue.</p> </li> <li> <p>Fully complete the provided issue template. The feature request template asks for all necessary information for us to begin a productive conversation.</p> </li> <li> <p>Be precise about the proposed outcome of the feature and how it relates to existing features. Include implementation details if possible.</p> </li> </ul>"},{"location":"contribute/contributing-guidelines/#triaging-issues","title":"Triaging Issues","text":"<p>You can triage issues which may include reproducing bug reports or asking for additional information, such as version numbers or reproduction instructions. Any help you can provide to quickly resolve an issue is very much appreciated!</p>"},{"location":"contribute/contributing-guidelines/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests </p> <p>Before forking the repo and creating a pull request for non-trivial changes, it is usually best to first open an issue to discuss the changes, or discuss your intended approach for solving the problem in the comments for an existing issue.</p> <p>For most contributions, after your first pull request is accepted and merged, you will be invited to the project and given push access. </p> <p>We use the Github workflow methodology for managing changes. This means that you should:</p> <p>Note: All contributions will be licensed under the project's license.</p> <ul> <li> <p>Smaller is better. Submit one pull request per bug fix or feature. A pull request should contain isolated changes pertaining to a single bug fix or feature implementation. Do not refactor or reformat code that is unrelated to your change. It is better to submit many small pull requests rather than a single large one. Enormous pull requests will take enormous amounts of time to review, or may be rejected altogether.</p> </li> <li> <p>Coordinate bigger changes. For large and non-trivial changes, open an issue to discuss a strategy with the maintainers. Otherwise, you risk doing a lot of work for nothing!</p> </li> <li> <p>Prioritize understanding over cleverness. Write code clearly and concisely. Remember that source code usually gets written once and read often. Ensure the code is clear to the reader. The purpose and logic should be obvious to a reasonably skilled developer, otherwise you should add a comment that explains it.</p> </li> <li> <p>Follow existing coding style and conventions. Keep your code consistent with the style, formatting, and conventions in the rest of the code base. When possible, these will be enforced with a linter. Consistency makes it easier to review and modify in the future.</p> </li> <li> <p>Include test coverage. Add unit tests or UI tests when possible. Follow existing patterns for implementing tests.</p> </li> <li> <p>Update the example project if one exists to exercise any new functionality you have added.</p> </li> <li> <p>Add documentation. Document your changes with code doc comments or in existing guides. Take a peek at our documentation guidelines for guidance on writing helpful documentation.</p> </li> <li> <p>Update the CHANGELOG for all enhancements and bug fixes. Include the corresponding issue number if one exists, and your GitHub username. (example: \"- Fixed crash in profile view. #123 @username\")</p> </li> <li> <p>Use the repo's default branch. Branch from and submit your pull request to the repo's default branch. Usually this is <code>main</code>, but it could be <code>dev</code>, <code>develop</code>, or <code>master</code>.</p> </li> <li> <p>Resolve any merge conflicts that occur.</p> </li> <li> <p>Promptly address any CI failures. If your pull request fails to build or pass tests, please push another commit to fix it.</p> </li> <li> <p>When writing comments, use properly constructed sentences, including punctuation.</p> </li> <li> <p>Use spaces, not tabs.</p> </li> <li> <p>Try not to touch a large number of files in a single PR if possible.</p> </li> <li> <p>Don't change whitespace or line wrapping in parts of a file you aren't editing for other reasons. Make sure your text editor isn't configured to automatically reformat the whole file when saving.</p> </li> </ul>"},{"location":"contribute/contributing-guidelines/#writing-commit-messages","title":"Writing Commit Messages","text":"<p>Please write a great commit message.</p> <ol> <li>Separate subject from body with a blank line</li> <li>Limit the subject line to 50 characters</li> <li>Capitalize the subject line</li> <li>Do not end the subject line with a period</li> <li>Use the imperative mood in the subject line (example: \"Fix networking issue\")</li> <li>Wrap the body at about 72 characters</li> <li>Use the body to explain why, not what and how (the code shows that!)</li> <li>If applicable, prefix the title with the relevant component name. (examples: \"[Docs] Fix typo\", \"[Profile] Fix missing avatar\")</li> </ol> <pre><code>[TAG] Short summary of changes in 50 chars or less\n\nAdd a more detailed explanation here, if necessary. Possibly give \nsome background about the issue being fixed, etc. The body of the \ncommit message can be several paragraphs. Further paragraphs come \nafter blank lines and please do proper word-wrap.\n\nWrap it to about 72 characters or so. In some contexts, \nthe first line is treated as the subject of the commit and the \nrest of the text as the body. The blank line separating the summary \nfrom the body is critical (unless you omit the body entirely); \nvarious tools like `log`, `shortlog` and `rebase` can get confused \nif you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how or what. The code explains \nhow or what. Reviewers and your future self can read the patch, \nbut might not understand why a particular solution was implemented.\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\n - Bullet points are okay, too\n\n - A hyphen or asterisk should be used for the bullet, preceded\n   by a single space, with blank lines in between\n\nNote the fixed or relevant GitHub issues at the end:\n\nResolves: #123\nSee also: #456, #789\n</code></pre>"},{"location":"contribute/contributing-guidelines/#code-review","title":"Code Review","text":"<ul> <li> <p>Review the code, not the author. Look for and suggest improvements without disparaging or insulting the author. Provide actionable feedback and explain your reasoning.</p> </li> <li> <p>You are not your code. When your code is critiqued, questioned, or constructively criticized, remember that you are not your code. Do not take code review personally.</p> </li> <li> <p>Always do your best. No one writes bugs on purpose. Do your best, and learn from your mistakes.</p> </li> <li> <p>Kindly note any violations to the guidelines specified in this document.</p> </li> </ul>"},{"location":"contribute/contributing-guidelines/#coding-style","title":"Coding Style","text":"<p>Consistency is the most important. Following the existing style, formatting, and naming conventions of the file you are modifying and of the overall project. Failure to do so will result in a prolonged review process that has to focus on updating the superficial aspects of your code, rather than improving its functionality and performance.</p> <p>For example, if all private properties are prefixed with an underscore <code>_</code>, then new ones you add should be prefixed in the same way. Or, if methods are named using camelcase, like <code>thisIsMyNewMethod</code>, then do not diverge from that by writing <code>this_is_my_new_method</code>. You get the idea. If in doubt, please refer to our style guide.</p> <p>When possible, style and format will be enforced with a linter.</p>"},{"location":"contribute/contributing-guidelines/#certificate-of-origin","title":"Certificate of Origin","text":"<p>Developer's Certificate of Origin 1.1</p> <p>By making a contribution to this project, I certify that:</p> <ol> <li>The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or</li> <li>The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or</li> <li>The contribution was provided directly to me by some other person who certified (1), (2) or (3) and I have not modified it.</li> <li>I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.</li> </ol>"},{"location":"contribute/contributing-guidelines/#no-brown-mms","title":"No Brown M&amp;M's","text":"<p>If you are reading this, bravo dear user and (hopefully) contributor for making it this far! You are awesome. </p> <p>To confirm that you have read this guide and are following it as best as possible, include this emoji at the top of your issue or pull request:  <code>:compass:</code></p>"},{"location":"contribute/security/","title":"Security Policy","text":"<p>If you discover a security issue, please bring it to our attention right away!</p>"},{"location":"contribute/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please DO NOT file a public issue to report a security vulberability, instead send your report privately to ADD-EMAIL-ADDRESS. This will help ensure that any vulnerabilities that are found can be disclosed responsibly to any affected parties.</p>"},{"location":"contribute/security/#supported-versions","title":"Supported Versions","text":"<p>Project versions that are currently being supported with security updates vary per project. Please see specific project repositories for details. If nothing is specified, only the latest major versions are supported.</p>"},{"location":"contribute/support/","title":"Support and Help","text":"<p>Need help getting started or using a project? Here's how.</p>"},{"location":"contribute/support/#how-to-get-help","title":"How to get help","text":"<p>Generally, we do not use GitHub as a support forum. For any usage questions that are not specific to the project itself, please ask on Stack Overflow instead. By doing so, you are more likely to quickly solve your problem, and you will allow anyone else with the same question to find the answer. This also allows maintainers to focus on improving the project for others.</p> <p>Please seek support in the following ways:</p> <ol> <li> <p> Read the documentation and other guides for the project to see if you can figure it out on your own. These should be located in a root <code>docs/</code> directory. If there is an example project, explore that to learn how it works to see if you can answer your question.</p> </li> <li> <p> Search for answers and ask questions on Stack Overflow. This is the most appropriate place for debugging issues specific to your use of the project, or figuring out how to use the project in a specific way.</p> </li> <li> <p> As a last resort, you may open an issue on GitHub to ask for help. However, please clearly explain what you are trying to do, and list what you have already attempted to solve the problem. Provide code samples, but do not attach your entire project for someone else to debug. Review our contributing guidelines.</p> </li> </ol>"},{"location":"contribute/support/#what-not-to-do","title":"What NOT to do","text":"<p>Please do not do any the following:</p> <ol> <li> <p> Do not reach out to the author or contributor on Twitter (or other social media) by tweeting or sending a direct message.</p> </li> <li> <p> Do not email the author or contributor.</p> </li> <li> <p> Do not open duplicate issues or litter an existing issue with +1's.</p> </li> </ol> <p>These are not appropriate avenues for seeking help or support with an open-source project. Please follow the guidelines in the previous section. Public questions get public answers, which benefits everyone in the community. \u270c\ufe0f</p>"},{"location":"ecosystem/astral-api/","title":"Astral API","text":"<p>A unified gateway for accessing location proof attestations (EAS attestations) across multiple blockchains. The API serves both OGC-compliant RESTful access for geospatial interoperability and a GraphQL interface for flexible queries.</p>"},{"location":"ecosystem/astral-api/#astral-protocol-api-documentation","title":"Astral Protocol API Documentation","text":"<p>Welcome to the Astral Protocol API documentation. This API provides access to location proof attestations across multiple blockchains, allowing developers to query, validate, and work with geographic location data that has been verified on the blockchain.</p>"},{"location":"ecosystem/astral-api/#what-is-astral-protocol","title":"What is Astral Protocol?","text":"<p>Astral Protocol is a system for creating, storing, and verifying location proofs on the blockchain. These proofs are stored as attestations using the Ethereum Attestation Service (EAS) and can be queried through this API.</p>"},{"location":"ecosystem/astral-api/#key-features","title":"Key Features","text":"<ul> <li>Multi-Chain Support: Query location proofs from Arbitrum, Base, Celo, and Sepolia</li> <li>Spatial Queries: Find location proofs within specific geographic areas</li> <li>Real-Time Syncing: Automatic synchronization with blockchain data every minute</li> <li>Revocation Checking: Verify if location proofs have been revoked</li> <li>GeoJSON Support: Work with standard GeoJSON location data</li> </ul>"},{"location":"ecosystem/astral-api/#api-overview","title":"API Overview","text":"<p>The Astral API is a RESTful API that provides endpoints for:</p> <ol> <li>Querying location proofs with various filters</li> <li>Retrieving specific location proofs by their unique identifier</li> <li>Getting statistics about available location proofs</li> <li>Triggering and monitoring blockchain synchronization</li> <li>Checking the status of the API and sync process</li> </ol>"},{"location":"ecosystem/astral-api/#getting-started","title":"Getting Started","text":"<p>To start using the Astral API:</p> <ol> <li>Check out the Getting Started Guide for a quick introduction</li> <li>Read the API Reference for detailed endpoint information</li> <li>Explore the Data Model to understand location proof structure</li> </ol>"},{"location":"ecosystem/astral-api/#example-use-cases","title":"Example Use Cases","text":"<p>The Astral API enables numerous applications, including:</p> <ul> <li>Supply Chain Verification: Track and verify the geographic journey of goods</li> <li>Environmental Monitoring: Record and verify location data for environmental observations</li> <li>Decentralized Mapping: Build maps with verified location data</li> <li>Proof-of-Presence: Verify that someone or something was at a specific location</li> <li>Geospatial Data Markets: Create marketplaces for verified location data</li> <li>Gaming: Enable location-based gameplay with verifiable locations</li> </ul>"},{"location":"ecosystem/astral-api/#documentation-contents","title":"Documentation Contents","text":"<p>This documentation is organized into the following sections:</p> <ul> <li>Introduction: Overview of the Astral Protocol API (this page)</li> <li>Getting Started: Quick start guide for using the API</li> <li>API Reference: Detailed information about all API endpoints</li> <li>Data Model: Overview of the location proof data model</li> <li>Spatial Queries: Guide to geographic filtering capabilities</li> <li>Authentication: Information about authentication (future)</li> <li>Troubleshooting: Solutions to common issues</li> </ul>"},{"location":"ecosystem/astral-api/#support-and-community","title":"Support and Community","text":"<p>If you have questions or need help:</p> <ul> <li>Check the Troubleshooting Guide for solutions to common problems</li> <li>Create an issue in the GitHub repository</li> <li>Join our community channels for discussion and support</li> </ul>"},{"location":"ecosystem/astral-api/#contributing","title":"Contributing","text":"<p>We welcome contributions to both the API and its documentation:</p> <ol> <li>Check existing issues or create a new one</li> <li>Fork the repository and create a feature branch</li> <li>Make your changes and submit a pull request</li> <li>Join the community discussion to share ideas and feedback</li> </ol>"},{"location":"ecosystem/astral-api/#license","title":"License","text":"<p>The Astral Protocol API is open source and available under MIT license.</p>"},{"location":"ecosystem/astral-api/api-reference/","title":"Astral API Reference","text":"<p>The Astral Protocol API provides access to location proof attestations from multiple blockchains. This document covers all available endpoints, request parameters, and response formats.</p>"},{"location":"ecosystem/astral-api/api-reference/#base-url","title":"Base URL","text":"<p>The base URL for all API endpoints is:</p> <pre><code>https://api.astral.global\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#authentication","title":"Authentication","text":"<p>The API currently does not require authentication for read operations. Future versions may implement authentication for permissioned read and write operations.</p>"},{"location":"ecosystem/astral-api/api-reference/#content-type","title":"Content Type","text":"<p>All requests and responses use JSON format. Include the following header in your requests:</p> <pre><code>Content-Type: application/json\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#endpoints","title":"Endpoints","text":""},{"location":"ecosystem/astral-api/api-reference/#health-check","title":"Health Check","text":"<pre><code>GET /health\n</code></pre> <p>Checks if the API is running.</p>"},{"location":"ecosystem/astral-api/api-reference/#response","title":"Response","text":"<pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Astral API is running\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#api-root","title":"API Root","text":"<pre><code>GET /\n</code></pre> <p>Returns basic information about the API and available endpoints.</p>"},{"location":"ecosystem/astral-api/api-reference/#response_1","title":"Response","text":"<pre><code>{\n  \"title\": \"Astral Protocol Location Proof API\",\n  \"description\": \"API for querying location proof attestations across multiple blockchains\",\n  \"version\": \"v0\",\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"href\": \"/\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"api\",\n      \"href\": \"/api/v0\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"config\",\n      \"href\": \"/api/v0/config\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"sync\",\n      \"href\": \"/api/sync\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"location-proofs\",\n      \"href\": \"/api/v0/location-proofs\",\n      \"type\": \"application/json\"\n    }\n  ]\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#get-configuration","title":"Get Configuration","text":"<pre><code>GET /api/v0/config\n</code></pre> <p>Returns the API configuration including supported chains and EAS schema information.</p>"},{"location":"ecosystem/astral-api/api-reference/#response_2","title":"Response","text":"<pre><code>{\n  \"chains\": {\n    \"arbitrum\": true,\n    \"celo\": true,\n    \"sepolia\": true,\n    \"base\": true\n  },\n  \"schema\": \"0xba4171c92572b1e4f241d044c32cdf083be9fd946b8766977558ca6378c824e2\",\n  \"schema_fields\": \"uint256 eventTimestamp,string srs,string locationType,string location,string[] recipeType,bytes[] recipePayload,string[] mediaType,string[] mediaData,string memo\",\n  \"version\": \"v0\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#get-location-proofs","title":"Get Location Proofs","text":"<pre><code>GET /api/v0/location-proofs\n</code></pre> <p>Returns a list of location proofs based on the provided query parameters.</p>"},{"location":"ecosystem/astral-api/api-reference/#query-parameters","title":"Query Parameters","text":"Parameter Type Description <code>chain</code> string Filter by blockchain (arbitrum, celo, sepolia, base) <code>prover</code> string Filter by the address that created the proof <code>subject</code> string Filter by the subject address <code>fromTimestamp</code> ISO date string Filter proofs after this timestamp <code>toTimestamp</code> ISO date string Filter proofs before this timestamp <code>bbox</code> array Bounding box in format <code>[minLng, minLat, maxLng, maxLat]</code> <code>limit</code> number Maximum number of results to return (default: 100) <code>offset</code> number Pagination offset"},{"location":"ecosystem/astral-api/api-reference/#response_3","title":"Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"uid\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n      \"chain\": \"sepolia\",\n      \"prover\": \"0xabcdef1234567890abcdef1234567890abcdef12\",\n      \"subject\": \"0xabcdef1234567890abcdef1234567890abcdef12\",\n      \"timestamp\": \"2023-09-15T12:34:56Z\",\n      \"event_timestamp\": \"2023-09-15T12:34:56Z\",\n      \"srs\": \"WGS84\",\n      \"location_type\": \"point\",\n      \"location\": \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-122.4194,37.7749]}\",\n      \"longitude\": -122.4194,\n      \"latitude\": 37.7749,\n      \"recipe_types\": [\"gps\", \"ip\"],\n      \"recipe_payloads\": [\"...\", \"...\"],\n      \"media_types\": [\"image/jpeg\"],\n      \"media_data\": [\"...\"],\n      \"memo\": \"San Francisco city center\",\n      \"revoked\": false,\n      \"created_at\": \"2023-09-15T12:35:00Z\",\n      \"updated_at\": \"2023-09-15T12:35:00Z\"\n    }\n    // ... more location proofs\n  ],\n  \"count\": 1,\n  \"limit\": 100,\n  \"offset\": 0\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#get-location-proof-by-uid","title":"Get Location Proof by UID","text":"<pre><code>GET /api/v0/location-proofs/:uid\n</code></pre> <p>Returns a specific location proof by its unique identifier (UID).</p>"},{"location":"ecosystem/astral-api/api-reference/#parameters","title":"Parameters","text":"Parameter Type Description <code>uid</code> string The unique identifier of the location proof"},{"location":"ecosystem/astral-api/api-reference/#response_4","title":"Response","text":"<pre><code>{\n  \"uid\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n  \"chain\": \"sepolia\",\n  \"prover\": \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  \"subject\": \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  \"timestamp\": \"2023-09-15T12:34:56Z\",\n  \"event_timestamp\": \"2023-09-15T12:34:56Z\",\n  \"srs\": \"WGS84\",\n  \"location_type\": \"point\",\n  \"location\": \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-122.4194,37.7749]}\",\n  \"longitude\": -122.4194,\n  \"latitude\": 37.7749,\n  \"recipe_types\": [\"gps\", \"ip\"],\n  \"recipe_payloads\": [\"...\", \"...\"],\n  \"media_types\": [\"image/jpeg\"],\n  \"media_data\": [\"...\"],\n  \"memo\": \"San Francisco city center\",\n  \"revoked\": false,\n  \"created_at\": \"2023-09-15T12:35:00Z\",\n  \"updated_at\": \"2023-09-15T12:35:00Z\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#get-location-proofs-statistics","title":"Get Location Proofs Statistics","text":"<pre><code>GET /api/v0/location-proofs/stats\n</code></pre> <p>Returns statistics about location proofs in the database.</p>"},{"location":"ecosystem/astral-api/api-reference/#response_5","title":"Response","text":"<pre><code>{\n  \"total\": 1250,\n  \"by_chain\": {\n    \"arbitrum\": 320,\n    \"celo\": 180,\n    \"sepolia\": 450,\n    \"base\": 300\n  },\n  \"by_time\": {\n    \"last_24_hours\": 50,\n    \"last_7_days\": 210,\n    \"last_30_days\": 480\n  },\n  \"revoked\": 15\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#trigger-sync","title":"Trigger Sync","text":"<pre><code>POST /api/sync\n</code></pre> <p>Triggers a synchronization of attestations from EAS for all chains or a specific chain.</p>"},{"location":"ecosystem/astral-api/api-reference/#query-parameters_1","title":"Query Parameters","text":"Parameter Type Description <code>chain</code> string Optional. Sync only a specific chain (arbitrum, celo, sepolia, base)"},{"location":"ecosystem/astral-api/api-reference/#response-all-chains","title":"Response (All Chains)","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Full sync cycle started\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#response-specific-chain","title":"Response (Specific Chain)","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Successfully synced 25 attestations from sepolia\",\n  \"chain\": \"sepolia\",\n  \"count\": 25\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#get-sync-status","title":"Get Sync Status","text":"<pre><code>GET /api/sync/status\n</code></pre> <p>Returns the current status of the synchronization process.</p>"},{"location":"ecosystem/astral-api/api-reference/#response_6","title":"Response","text":"<pre><code>{\n  \"status\": \"ok\",\n  \"worker\": {\n    \"running\": true,\n    \"isAttestationSyncRunning\": false,\n    \"isRevocationCheckRunning\": false,\n    \"startTime\": \"2023-09-15T10:00:00Z\",\n    \"uptime\": 7200,\n    \"lastSuccessfulRun\": \"2023-09-15T12:00:00Z\",\n    \"lastRunDuration\": \"25.30s\",\n    \"totalRuns\": 12,\n    \"successfulRuns\": 11,\n    \"failedRuns\": 1\n  },\n  \"attestations\": {\n    \"totalIngested\": 1250,\n    \"byChain\": {\n      \"arbitrum\": 320,\n      \"celo\": 180,\n      \"sepolia\": 450,\n      \"base\": 300\n    },\n    \"lastRunIngested\": {\n      \"arbitrum\": 5,\n      \"celo\": 2,\n      \"sepolia\": 8,\n      \"base\": 10\n    }\n  },\n  \"revocationChecks\": {\n    \"lastRun\": \"2023-09-15T11:30:00Z\",\n    \"totalChecked\": 1000,\n    \"totalRevoked\": 15\n  },\n  \"supportedChains\": [\"arbitrum\", \"base\", \"celo\", \"sepolia\"],\n  \"recentErrors\": [\n    {\n      \"timestamp\": \"2023-09-15T11:15:00Z\",\n      \"message\": \"Network timeout for GraphQL request\",\n      \"chain\": \"arbitrum\"\n    }\n  ]\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#trigger-revocation-check","title":"Trigger Revocation Check","text":"<pre><code>POST /api/sync/revocations\n</code></pre> <p>Triggers a check for revocations of existing attestations.</p>"},{"location":"ecosystem/astral-api/api-reference/#response_7","title":"Response","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Revocation check started\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#control-worker","title":"Control Worker","text":"<pre><code>POST /api/sync/worker\n</code></pre> <p>Controls the background worker that performs synchronization.</p>"},{"location":"ecosystem/astral-api/api-reference/#query-parameters_2","title":"Query Parameters","text":"Parameter Type Description <code>action</code> string The action to perform (<code>start</code> or <code>stop</code>)"},{"location":"ecosystem/astral-api/api-reference/#response-start","title":"Response (Start)","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Background worker started\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#response-stop","title":"Response (Stop)","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Background worker stopped\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#error-responses","title":"Error Responses","text":"<p>All API endpoints return appropriate HTTP status codes and error messages in case of failures.</p>"},{"location":"ecosystem/astral-api/api-reference/#example-error-response","title":"Example Error Response","text":"<pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Failed to get sync status\",\n  \"error\": \"Database connection error\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/api-reference/#common-status-codes","title":"Common Status Codes","text":"Status Code Description 200 OK - The request was successful 202 Accepted - The request has been accepted for processing 400 Bad Request - The request was invalid 404 Not Found - The requested resource was not found 409 Conflict - The request couldn't be processed due to a conflict 500 Internal Server Error - Something went wrong on the server"},{"location":"ecosystem/astral-api/api-reference/#rate-limiting","title":"Rate Limiting","text":"<p>The API currently does not implement rate limiting, but users should be mindful of their request frequency to ensure optimal performance for all users.</p>"},{"location":"ecosystem/astral-api/api-reference/#pagination","title":"Pagination","text":"<p>The API supports pagination through the <code>limit</code> and <code>offset</code> parameters for endpoints that return collections.</p> <p>Example:  <pre><code>GET /api/v0/location-proofs?limit=20&amp;offset=40\n</code></pre></p> <p>This will return 20 location proofs starting from the 41st record.</p>"},{"location":"ecosystem/astral-api/authentication/","title":"Authentication","text":"<p>The Astral Protocol API currently operates with public read access and does not require authentication for most endpoints. This document outlines the current authentication approach and future plans.</p>"},{"location":"ecosystem/astral-api/authentication/#current-authentication-model","title":"Current Authentication Model","text":""},{"location":"ecosystem/astral-api/authentication/#public-access-endpoints","title":"Public Access Endpoints","text":"<p>Most endpoints in the Astral API are publicly accessible without authentication:</p> <ul> <li><code>/health</code> - Health check endpoint</li> <li><code>/</code> - API root information</li> <li><code>/api/v0/config</code> - API configuration</li> <li><code>/api/v0/location-proofs</code> - Location proofs queries</li> <li><code>/api/v0/location-proofs/:uid</code> - Individual location proof retrieval</li> <li><code>/api/v0/location-proofs/stats</code> - Statistics on location proofs</li> </ul>"},{"location":"ecosystem/astral-api/authentication/#restricted-endpoints","title":"Restricted Endpoints","text":"<p>Some endpoints that trigger actions or control the system are currently restricted to serverless functions and cron triggers:</p> <ul> <li><code>/api/sync</code> - Trigger synchronization of attestations</li> <li><code>/api/sync/status</code> - Get synchronization status</li> <li><code>/api/sync/revocations</code> - Trigger revocation checks</li> <li><code>/api/sync/worker</code> - Control the background worker</li> </ul> <p>These endpoints are protected through Vercel's internal mechanisms rather than API keys or tokens.</p>"},{"location":"ecosystem/astral-api/authentication/#planned-authentication-features","title":"Planned Authentication Features","text":"<p>In future releases, the API will implement more robust authentication mechanisms:</p> <ol> <li>API Key Authentication: For basic API access, enabling rate limiting and usage tracking</li> <li>JWT Authentication: For user-specific operations and accessing private data</li> <li>OAuth 2.0: For third-party integration and delegation of access</li> </ol>"},{"location":"ecosystem/astral-api/authentication/#api-key-authentication","title":"API Key Authentication","text":"<p>API keys will be implemented for general API access, allowing:</p> <ul> <li>Basic authentication for API calls</li> <li>Rate limiting based on API key</li> <li>Usage tracking and analytics</li> <li>Different tiers of access (e.g., basic, premium)</li> </ul> <p>Example API key usage (future implementation):</p> <pre><code>curl -H \"X-API-Key: your_api_key_here\" https://api.astral.global/api/v0/location-proofs\n</code></pre>"},{"location":"ecosystem/astral-api/authentication/#jwt-authentication","title":"JWT Authentication","text":"<p>JSON Web Token (JWT) authentication will be used for user-specific operations:</p> <ul> <li>User authentication and authorization</li> <li>Access to user-specific data</li> <li>Operation on behalf of a user</li> </ul> <p>Example JWT usage (future implementation):</p> <pre><code>curl -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" https://api.astral.global/api/v0/my-location-proofs\n</code></pre>"},{"location":"ecosystem/astral-api/authentication/#wallet-based-authentication","title":"Wallet-Based Authentication","text":"<p>As the Astral Protocol is blockchain-based, wallet signature authentication will be supported:</p> <ul> <li>Sign a message with your Ethereum wallet</li> <li>Verify ownership of a blockchain address</li> <li>Access to attestations created by your address</li> </ul>"},{"location":"ecosystem/astral-api/authentication/#api-key-management","title":"API Key Management","text":"<p>When API keys are implemented, they will be managed through a dedicated portal:</p> <ol> <li>Register for an API key through the developer portal</li> <li>Select the appropriate tier based on your needs</li> <li>Generate and manage API keys</li> <li>View usage statistics and rate limits</li> </ol>"},{"location":"ecosystem/astral-api/authentication/#best-practices","title":"Best Practices","text":"<p>Even though authentication is not currently required, we recommend implementing your code with authentication in mind for future compatibility:</p> <pre><code>// Example: Authentication-ready API client\nclass AstralApiClient {\n  constructor(config = {}) {\n    this.baseUrl = config.baseUrl || 'https://api.astral.global';\n    this.apiKey = config.apiKey || null;\n  }\n\n  async getLocationProofs(params = {}) {\n    const url = new URL(`${this.baseUrl}/api/v0/location-proofs`);\n\n    // Add query parameters\n    Object.keys(params).forEach(key =&gt; {\n      url.searchParams.append(key, params[key]);\n    });\n\n    // Prepare headers\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n\n    // Add authentication when available\n    if (this.apiKey) {\n      headers['X-API-Key'] = this.apiKey;\n    }\n\n    const response = await fetch(url, { headers });\n\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n\n    return response.json();\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/authentication/#security-considerations","title":"Security Considerations","text":"<p>When working with the API:</p> <ol> <li>Keep your API keys secure and do not expose them in client-side code</li> <li>Implement proper token storage and refresh mechanisms</li> <li>Use HTTPS for all API requests</li> <li>Regularly rotate your API keys</li> <li>Only request the permissions you need</li> </ol>"},{"location":"ecosystem/astral-api/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>While authentication is not currently required, the API may implement rate limiting based on IP address. In the future, authenticated requests will have higher rate limits than unauthenticated ones.</p> <p>Current limits: - Unauthenticated requests: 100 requests per minute - Authenticated requests: To be determined based on tier</p>"},{"location":"ecosystem/astral-api/authentication/#feedback","title":"Feedback","text":"<p>We welcome feedback on our authentication plans. If you have specific requirements or suggestions, please:</p> <ol> <li>Create an issue in the GitHub repository</li> <li>Reach out through our community channels</li> </ol>"},{"location":"ecosystem/astral-api/data-model/","title":"Data Model","text":"<p>This document describes the data model used in the Astral Protocol API for location proofs.</p>"},{"location":"ecosystem/astral-api/data-model/#location-proof","title":"Location Proof","text":"<p>A location proof is an attestation about a geographic location, created by a prover and optionally referring to a subject. Each proof is stored on a blockchain using the Ethereum Attestation Service (EAS) and then indexed by the Astral API for easy querying.</p>"},{"location":"ecosystem/astral-api/data-model/#core-fields","title":"Core Fields","text":"Field Type Description <code>uid</code> string Unique identifier of the attestation (UUID v4 format) <code>chain</code> string Blockchain where the attestation is stored (e.g., \"sepolia\", \"arbitrum\") <code>prover</code> string Ethereum address that created the attestation <code>subject</code> string Optional Ethereum address that the attestation is about (if null, same as prover) <code>timestamp</code> ISO date When the attestation was recorded on the blockchain <code>event_timestamp</code> ISO date When the attested event actually occurred <code>revoked</code> boolean Whether the attestation has been revoked by the prover"},{"location":"ecosystem/astral-api/data-model/#location-data","title":"Location Data","text":"Field Type Description <code>srs</code> string Spatial reference system (typically \"WGS84\") <code>location_type</code> string Type of location (e.g., \"point\", \"polygon\", \"linestring\") <code>location</code> string (GeoJSON) Full GeoJSON representation of the location <code>longitude</code> number Longitude coordinate (if available) <code>latitude</code> number Latitude coordinate (if available) <code>geometry</code> PostGIS Spatial geometry data (internal use)"},{"location":"ecosystem/astral-api/data-model/#attestation-data","title":"Attestation Data","text":"Field Type Description <code>recipe_types</code> string[] Types of verification methods used (e.g., \"gps\", \"ip\", \"wifi\") <code>recipe_payloads</code> bytes[] Raw verification data for each method <code>media_types</code> string[] MIME types of attached media (e.g., \"image/jpeg\") <code>media_data</code> string[] Base64-encoded media data <code>memo</code> string Optional description or note about the location"},{"location":"ecosystem/astral-api/data-model/#metadata","title":"Metadata","text":"Field Type Description <code>created_at</code> ISO date When the proof was added to the Astral database <code>updated_at</code> ISO date When the proof was last updated in the database"},{"location":"ecosystem/astral-api/data-model/#json-representation","title":"JSON Representation","text":"<pre><code>{\n  \"uid\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n  \"chain\": \"sepolia\",\n  \"prover\": \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  \"subject\": \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  \"timestamp\": \"2023-09-15T12:34:56Z\",\n  \"event_timestamp\": \"2023-09-15T12:34:56Z\",\n  \"srs\": \"WGS84\",\n  \"location_type\": \"point\",\n  \"location\": \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-122.4194,37.7749]}\",\n  \"longitude\": -122.4194,\n  \"latitude\": 37.7749,\n  \"recipe_types\": [\"gps\", \"ip\"],\n  \"recipe_payloads\": [\"0x1234...\", \"0x5678...\"],\n  \"media_types\": [\"image/jpeg\"],\n  \"media_data\": [\"base64_encoded_data...\"],\n  \"memo\": \"San Francisco city center\",\n  \"revoked\": false,\n  \"created_at\": \"2023-09-15T12:35:00Z\",\n  \"updated_at\": \"2023-09-15T12:35:00Z\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#eas-schema","title":"EAS Schema","text":"<p>Location proofs use the following EAS schema:</p> <pre><code>uint256 eventTimestamp,string srs,string locationType,string location,string[] recipeType,bytes[] recipePayload,string[] mediaType,string[] mediaData,string memo\n</code></pre> <p>Schema UID: <code>0xba4171c92572b1e4f241d044c32cdf083be9fd946b8766977558ca6378c824e2</code></p>"},{"location":"ecosystem/astral-api/data-model/#geojson-formats","title":"GeoJSON Formats","text":"<p>The <code>location</code> field uses GeoJSON format for representing spatial data. Supported GeoJSON types include:</p>"},{"location":"ecosystem/astral-api/data-model/#point","title":"Point","text":"<pre><code>{\n  \"type\": \"Point\",\n  \"coordinates\": [-122.4194, 37.7749]\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#linestring","title":"LineString","text":"<pre><code>{\n  \"type\": \"LineString\",\n  \"coordinates\": [\n    [-122.4194, 37.7749],\n    [-122.4143, 37.7749],\n    [-122.4098, 37.7837]\n  ]\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#polygon","title":"Polygon","text":"<pre><code>{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [\n      [-122.4194, 37.7749],\n      [-122.4143, 37.7749],\n      [-122.4098, 37.7837],\n      [-122.4194, 37.7837],\n      [-122.4194, 37.7749]\n    ]\n  ]\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#feature","title":"Feature","text":"<pre><code>{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-122.4194, 37.7749]\n  },\n  \"properties\": {\n    \"name\": \"San Francisco\"\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#featurecollection","title":"FeatureCollection","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-122.4194, 37.7749]\n      },\n      \"properties\": {\n        \"name\": \"San Francisco\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-74.0060, 40.7128]\n      },\n      \"properties\": {\n        \"name\": \"New York\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#recipe-types","title":"Recipe Types","text":"<p>The <code>recipe_types</code> field indicates how the location was verified. Common types include:</p> Recipe Type Description <code>gps</code> GPS coordinates from a device <code>ip</code> Geolocation based on IP address <code>wifi</code> Location based on nearby WiFi networks <code>cellular</code> Location based on cellular towers <code>manual</code> Manually entered coordinates <code>beacon</code> Location derived from nearby beacons <code>satellite</code> Satellite-derived location data <code>qrcode</code> Location confirmed by scanning QR code <code>nfc</code> Location confirmed by NFC tag"},{"location":"ecosystem/astral-api/data-model/#database-schema-postgresql","title":"Database Schema (PostgreSQL)","text":"<p>The API uses PostgreSQL with PostGIS for storing and querying location proofs:</p> <pre><code>CREATE TABLE location_proofs (\n  uid VARCHAR PRIMARY KEY,\n  chain VARCHAR NOT NULL,\n  prover VARCHAR NOT NULL,\n  subject VARCHAR,\n  timestamp TIMESTAMPTZ,\n  event_timestamp TIMESTAMPTZ NOT NULL,\n  srs VARCHAR,\n  location_type VARCHAR NOT NULL,\n  location TEXT NOT NULL,\n  longitude NUMERIC,\n  latitude NUMERIC,\n  recipe_types JSONB,\n  recipe_payloads JSONB,\n  media_types JSONB,\n  media_data JSONB,\n  memo TEXT,\n  revoked BOOLEAN DEFAULT false,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Add geometry column\nSELECT AddGeometryColumn('public', 'location_proofs', 'geometry', 4326, 'GEOMETRY', 2);\n\n-- Create indexes\nCREATE INDEX idx_location_proofs_chain ON public.location_proofs(chain);\nCREATE INDEX idx_location_proofs_prover ON public.location_proofs(prover);\nCREATE INDEX idx_location_proofs_subject ON public.location_proofs(subject);\nCREATE INDEX idx_location_proofs_timestamp ON public.location_proofs(event_timestamp);\nCREATE INDEX idx_location_proofs_geometry ON public.location_proofs USING GIST(geometry);\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#query-parameters","title":"Query Parameters","text":"<p>When querying location proofs, the following parameters map to the data model:</p> Parameter Field Example <code>chain</code> chain <code>?chain=sepolia</code> <code>prover</code> prover <code>?prover=0x1234...</code> <code>subject</code> subject <code>?subject=0x5678...</code> <code>fromTimestamp</code> event_timestamp <code>?fromTimestamp=2023-01-01T00:00:00Z</code> <code>toTimestamp</code> event_timestamp <code>?toTimestamp=2023-12-31T23:59:59Z</code> <code>bbox</code> geometry <code>?bbox=-122.5,37.7,-122.3,37.9</code>"},{"location":"ecosystem/astral-api/data-model/#relationships","title":"Relationships","text":"<p>Location proofs have the following relationships:</p> <ol> <li>Chain - Each proof is stored on exactly one blockchain</li> <li>Prover - Each proof is created by exactly one Ethereum address</li> <li>Subject - Each proof may optionally be about a specific Ethereum address</li> <li>Revocation - A proof may be revoked by its prover</li> </ol>"},{"location":"ecosystem/astral-api/data-model/#extensions","title":"Extensions","text":"<p>The data model may be extended in future versions to include:</p> <ol> <li>Verification Status - Additional verification of the proof by third parties</li> <li>Confidence Level - Measurement of location accuracy</li> <li>Temporal Validity - Time range when the location proof is valid</li> <li>Environmental Conditions - Weather, atmospheric conditions, etc.</li> <li>Chain of Custody - Record of who has accessed or modified the proof</li> </ol>"},{"location":"ecosystem/astral-api/data-model/#working-with-the-data-model","title":"Working with the Data Model","text":""},{"location":"ecosystem/astral-api/data-model/#typescript-interface","title":"TypeScript Interface","text":"<pre><code>interface LocationProof {\n  uid: string;\n  chain: string;\n  prover: string;\n  subject?: string;\n  timestamp: Date;\n  event_timestamp: Date;\n  srs?: string;\n  location_type: string;\n  location: string;\n  longitude?: number;\n  latitude?: number;\n  recipe_types?: string[];\n  recipe_payloads?: string[];\n  media_types?: string[];\n  media_data?: string[];\n  memo?: string;\n  revoked: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\ninterface LocationProofQueryParams {\n  chain?: string;\n  prover?: string;\n  subject?: string;\n  fromTimestamp?: Date;\n  toTimestamp?: Date;\n  bbox?: [number, number, number, number]; // [minLng, minLat, maxLng, maxLat]\n  limit?: number;\n  offset?: number;\n}\n</code></pre>"},{"location":"ecosystem/astral-api/data-model/#example-parsing-a-location-proof","title":"Example: Parsing a Location Proof","text":"<pre><code>function parseLocationProof(data) {\n  // Parse GeoJSON location\n  let parsedLocation;\n  try {\n    parsedLocation = JSON.parse(data.location);\n  } catch (e) {\n    parsedLocation = null;\n  }\n\n  // Get coordinates from GeoJSON or direct fields\n  let coordinates;\n  if (parsedLocation &amp;&amp; parsedLocation.type === 'Point') {\n    coordinates = parsedLocation.coordinates;\n  } else if (data.longitude !== null &amp;&amp; data.latitude !== null) {\n    coordinates = [data.longitude, data.latitude];\n  } else {\n    coordinates = null;\n  }\n\n  return {\n    id: data.uid,\n    location: {\n      type: data.location_type,\n      coordinates,\n      full: parsedLocation\n    },\n    attestation: {\n      chain: data.chain,\n      prover: data.prover,\n      subject: data.subject || data.prover,\n      timestamp: new Date(data.event_timestamp),\n      revoked: data.revoked\n    },\n    metadata: {\n      recipes: data.recipe_types || [],\n      media: data.media_types || [],\n      memo: data.memo || \"\"\n    }\n  };\n}\n</code></pre>"},{"location":"ecosystem/astral-api/documentation-review/","title":"Documentation Review for Astral API","text":"<p>This is an internal review document to guide documentation improvements.</p>"},{"location":"ecosystem/astral-api/documentation-review/#overview","title":"Overview","text":"<p>This document provides a comprehensive review of the Astral API documentation as part of Phase 9. The documentation is generally thorough and well-structured, covering most aspects of the API. Below are findings and recommendations to ensure the documentation is accurate, comprehensive, and production-ready.</p>"},{"location":"ecosystem/astral-api/documentation-review/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is well-organized with the following components:</p> <ul> <li>README.md: Quick start guide and high-level overview</li> <li>VERCEL-DEPLOY.md: Deployment instructions for Vercel</li> <li>DEPLOYMENT-CHECKLIST.md: Checklist for deployment verification</li> <li>docs/: Detailed documentation folder with specific guides:</li> <li>index.md: Main entry point and introduction</li> <li>getting-started.md: Quick start guide</li> <li>api-reference.md: Comprehensive API endpoint documentation</li> <li>data-model.md: Schema and data structure details</li> <li>spatial-queries.md: Guide for geographic filtering</li> <li>authentication.md: Information about current and future auth</li> <li>troubleshooting.md: Solutions for common issues</li> <li>ogc-api.md: OGC API Features documentation</li> <li>graphql-api.md: GraphQL API documentation</li> </ul>"},{"location":"ecosystem/astral-api/documentation-review/#key-findings","title":"Key Findings","text":""},{"location":"ecosystem/astral-api/documentation-review/#strengths","title":"Strengths","text":"<ol> <li>Comprehensive Coverage: Documentation covers all major components of the API</li> <li>Well-Structured: Clear organization with dedicated sections for different aspects</li> <li>Code Examples: Good inclusion of code snippets in multiple languages</li> <li>Troubleshooting Guide: Thorough troubleshooting section with common issues</li> <li>Clear Deployment Instructions: Detailed instructions for Vercel deployment</li> </ol>"},{"location":"ecosystem/astral-api/documentation-review/#areas-for-improvement","title":"Areas for Improvement","text":"<ol> <li>URL Consistency: Ensure consistent URL usage across all documentation files</li> <li>Base URL is correctly defined as <code>https://api.astral.global</code> in api-reference.md</li> <li> <p>Some examples still use the Vercel preview URL <code>https://api.astral.global</code></p> </li> <li> <p>GraphQL Documentation Enhancements:</p> </li> <li>Add a section on introspection and how to use it for schema exploration</li> <li>Include information about GraphQL playground access</li> <li> <p>Add more complex query examples</p> </li> <li> <p>Production Readiness:</p> </li> <li>Update DEPLOYMENT-CHECKLIST.md to reflect current deployment status</li> <li>Add monitoring and observability recommendations</li> <li> <p>Include backup and disaster recovery procedures</p> </li> <li> <p>Missing Documentation:</p> </li> <li>Add documentation for how to update the API when schema changes</li> <li>Create a changelog to track API version changes</li> <li> <p>Add performance benchmarks and recommendations</p> </li> <li> <p>Example Consistency:</p> </li> <li>Ensure all code examples use the production URL base</li> <li>Update example outputs to match actual API responses</li> </ol>"},{"location":"ecosystem/astral-api/documentation-review/#recommended-updates","title":"Recommended Updates","text":""},{"location":"ecosystem/astral-api/documentation-review/#high-priority","title":"High Priority","text":"<ol> <li>URL Standardization:</li> <li>Replace all instances of Vercel preview URL with production URL</li> <li> <p>Check all code examples for correct URL usage</p> </li> <li> <p>Deployment Documentation:</p> </li> <li>Update DEPLOYMENT-CHECKLIST.md to mark completed steps</li> <li> <p>Add notes about current deployment status and health checks</p> </li> <li> <p>Validation:</p> </li> <li>Test all API endpoints as documented and verify responses match examples</li> <li>Verify all query parameters work as described</li> </ol>"},{"location":"ecosystem/astral-api/documentation-review/#medium-priority","title":"Medium Priority","text":"<ol> <li>GraphQL API Enhancements:</li> <li>Add documentation for Apollo Explorer</li> <li> <p>Include more examples for spatial queries via GraphQL</p> </li> <li> <p>OGC API Clarifications:</p> </li> <li>Add more examples of advanced filtering</li> <li> <p>Document limitations and performance considerations</p> </li> <li> <p>Integration Guide:</p> </li> <li>Create a dedicated integration guide for common platforms</li> <li>Add SDK documentation or wrappers if available</li> </ol>"},{"location":"ecosystem/astral-api/documentation-review/#low-priority","title":"Low Priority","text":"<ol> <li>Future Roadmap:</li> <li>Add a section on upcoming features or API changes</li> <li> <p>Document versioning strategy</p> </li> <li> <p>Advanced Use Cases:</p> </li> <li>Add documentation for batch operations</li> <li>Document rate limiting strategy and quotas</li> </ol>"},{"location":"ecosystem/astral-api/documentation-review/#production-readiness-checklist","title":"Production Readiness Checklist","text":"<ul> <li>[x] Base API functionality documented</li> <li>[x] Deployment process documented</li> <li>[x] All endpoints documented with examples</li> <li>[x] Troubleshooting guide available</li> <li>[x] Data model documented</li> <li>[x] GraphQL API documented</li> <li>[x] OGC API documented</li> <li>[ ] URL consistency verified across all docs</li> <li>[ ] All endpoints verified working in production</li> <li>[ ] Monitoring and alerting documented</li> <li>[ ] Regular backup process documented</li> <li>[ ] Service Level Objectives (SLOs) defined</li> <li>[ ] Security procedures documented</li> <li>[ ] Disaster recovery plan documented</li> </ul>"},{"location":"ecosystem/astral-api/documentation-review/#conclusion","title":"Conclusion","text":"<p>The Astral API documentation is comprehensive and well-structured, covering the essential aspects of the API. With the recommended updates, particularly URL standardization and deployment status verification, the documentation will be fully production-ready.</p> <p>The API itself appears to be feature complete and deployed successfully, with good support for both REST and GraphQL interfaces. The OGC API Features support is particularly well-implemented.</p> <p>This review concludes Phase 9 of the project and confirms that the API is ready for production use with minor documentation updates.</p>"},{"location":"ecosystem/astral-api/getting-started/","title":"Getting Started with Astral API","text":"<p>This guide will help you get started with the Astral Protocol API, a service for accessing location proof attestations from multiple blockchains.</p>"},{"location":"ecosystem/astral-api/getting-started/#what-is-astral-protocol","title":"What is Astral Protocol?","text":"<p>Astral's Location Proof Protocol provides a system for creating, storing, and verifying location proofs. These proofs are stored as attestations on multiple blockchains using the Ethereum Attestation Service (EAS).</p> <p>The Astral API provides a simple REST interface to query these attestations.</p>"},{"location":"ecosystem/astral-api/getting-started/#api-overview","title":"API Overview","text":"<p>The Astral API provides:</p> <ol> <li>Location Proofs - Access to geospatially indexed location attestations</li> <li>Blockchain Sync - Automatic synchronization with multiple blockchains</li> <li>Spatial Queries - Geographic filtering capabilities</li> <li>Revocation Checking - Verification of attestation validity</li> <li>Automatic Sync - Background synchronization runs every minute to keep data fresh</li> </ol>"},{"location":"ecosystem/astral-api/getting-started/#supported-blockchains","title":"Supported Blockchains","text":"<p>The API currently supports the following blockchains:</p> <ul> <li>Arbitrum</li> <li>Base</li> <li>Celo</li> <li>Sepolia (Ethereum testnet)</li> </ul>"},{"location":"ecosystem/astral-api/getting-started/#quick-start","title":"Quick Start","text":""},{"location":"ecosystem/astral-api/getting-started/#making-your-first-api-request","title":"Making Your First API Request","text":"<p>Let's make a simple request to check if the API is running:</p> <pre><code>curl https://api.astral.global/health\n</code></pre> <p>You should receive a response like:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Astral API is running\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/getting-started/#get-api-configuration","title":"Get API Configuration","text":"<p>To see the supported chains and schema information:</p> <pre><code>curl https://api.astral.global/api/v0/config\n</code></pre> <p>Response:</p> <pre><code>{\n  \"chains\": {\n    \"arbitrum\": true,\n    \"celo\": true,\n    \"sepolia\": true,\n    \"base\": true\n  },\n  \"schema\": \"0xba4171c92572b1e4f241d044c32cdf083be9fd946b8766977558ca6378c824e2\",\n  \"schema_fields\": \"uint256 eventTimestamp,string srs,string locationType,string location,string[] recipeType,bytes[] recipePayload,string[] mediaType,string[] mediaData,string memo\",\n  \"version\": \"v0\"\n}\n</code></pre>"},{"location":"ecosystem/astral-api/getting-started/#query-location-proofs","title":"Query Location Proofs","text":"<p>To get a list of location proofs, you can make a GET request to the location-proofs endpoint:</p> <pre><code>curl https://api.astral.global/api/v0/location-proofs\n</code></pre> <p>By default, this will return the most recent 100 location proofs.</p>"},{"location":"ecosystem/astral-api/getting-started/#filtered-query-example","title":"Filtered Query Example","text":"<p>To get location proofs for a specific chain and address:</p> <pre><code>curl \"https://api.astral.global/api/v0/location-proofs?chain=sepolia&amp;prover=0xabcdef1234567890abcdef1234567890abcdef12&amp;limit=10\"\n</code></pre>"},{"location":"ecosystem/astral-api/getting-started/#integration-examples","title":"Integration Examples","text":""},{"location":"ecosystem/astral-api/getting-started/#javascript-nodejs","title":"JavaScript (Node.js)","text":"<pre><code>const axios = require('axios');\n\nasync function getLocationProofs() {\n  try {\n    // Get all location proofs\n    const response = await axios.get('https://api.astral.global/api/v0/location-proofs');\n    console.log(`Found ${response.data.count} location proofs`);\n    console.log(response.data.data);\n  } catch (error) {\n    console.error('Error fetching location proofs:', error);\n  }\n}\n\ngetLocationProofs();\n</code></pre>"},{"location":"ecosystem/astral-api/getting-started/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_location_proofs():\n    try:\n        # Query proofs within a specific area (San Francisco)\n        params = {\n            'bbox': '-122.5,37.7,-122.3,37.9',  # minLng,minLat,maxLng,maxLat\n            'limit': 20\n        }\n        response = requests.get('https://api.astral.global/api/v0/location-proofs', params=params)\n        response.raise_for_status()\n\n        data = response.json()\n        print(f\"Found {data['count']} location proofs in San Francisco\")\n        for proof in data['data']:\n            print(f\"Proof ID: {proof['uid']}, Location: {proof['latitude']}, {proof['longitude']}\")\n\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching location proofs: {e}\")\n\nget_location_proofs()\n</code></pre>"},{"location":"ecosystem/astral-api/getting-started/#web-application-react","title":"Web Application (React)","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction LocationProofsList() {\n  const [proofs, setProofs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    async function fetchData() {\n      try {\n        setLoading(true);\n        const response = await fetch('https://api.astral.global/api/v0/location-proofs');\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        setProofs(data.data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  if (loading) return &lt;p&gt;Loading location proofs...&lt;/p&gt;;\n  if (error) return &lt;p&gt;Error loading location proofs: {error}&lt;/p&gt;;\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Location Proofs&lt;/h2&gt;\n      &lt;ul&gt;\n        {proofs.map(proof =&gt; (\n          &lt;li key={proof.uid}&gt;\n            &lt;strong&gt;Location:&lt;/strong&gt; {proof.latitude}, {proof.longitude}\n            &lt;br /&gt;\n            &lt;strong&gt;Time:&lt;/strong&gt; {new Date(proof.event_timestamp).toLocaleString()}\n            &lt;br /&gt;\n            &lt;strong&gt;Chain:&lt;/strong&gt; {proof.chain}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default LocationProofsList;\n</code></pre>"},{"location":"ecosystem/astral-api/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you've made your first requests to the Astral API, check out these resources to learn more:</p> <ul> <li>API Reference - Complete reference for all API endpoints</li> <li>Data Model - Information about the data model and structure</li> <li>Authentication - Information about authentication (coming soon)</li> <li>SDK Documentation - Client SDKs for various languages (coming soon)</li> </ul>"},{"location":"ecosystem/astral-api/getting-started/#getting-help","title":"Getting Help","text":"<p>If you have questions or run into issues with the API, please:</p> <ol> <li>Check the API Reference for detailed documentation</li> <li>Review the Troubleshooting Guide for common issues</li> <li>Create an issue in the GitHub repository</li> <li>Reach out to the team through our community channels</li> </ol>"},{"location":"ecosystem/astral-api/graphql-api/","title":"GraphQL API Documentation","text":"<p>This document describes the GraphQL API for accessing location proof attestations in the Astral Protocol API.</p>"},{"location":"ecosystem/astral-api/graphql-api/#overview","title":"Overview","text":"<p>The GraphQL API provides a flexible interface for querying location proofs with filtering, aggregation, and mutation capabilities. </p>"},{"location":"ecosystem/astral-api/graphql-api/#endpoint","title":"Endpoint","text":"<p>The GraphQL API is available at:</p> <pre><code>/graphql\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#schema","title":"Schema","text":"<p>The API provides the following main types and operations:</p>"},{"location":"ecosystem/astral-api/graphql-api/#queries","title":"Queries","text":""},{"location":"ecosystem/astral-api/graphql-api/#locationproofuid-id-locationproof","title":"<code>locationProof(uid: ID!): LocationProof</code>","text":"<p>Retrieves a single location proof by its unique identifier.</p>"},{"location":"ecosystem/astral-api/graphql-api/#locationproofsfilter-locationprooffilter-locationproof","title":"<code>locationProofs(filter: LocationProofFilter): [LocationProof!]!</code>","text":"<p>Retrieves a list of location proofs with optional filtering.</p>"},{"location":"ecosystem/astral-api/graphql-api/#locationproofscountfilter-locationprooffilter-int","title":"<code>locationProofsCount(filter: LocationProofFilter): Int!</code>","text":"<p>Returns the count of location proofs matching the filter criteria.</p>"},{"location":"ecosystem/astral-api/graphql-api/#locationproofsstats-locationproofstats","title":"<code>locationProofsStats: LocationProofStats!</code>","text":"<p>Returns statistics about the location proofs, including counts by blockchain.</p>"},{"location":"ecosystem/astral-api/graphql-api/#mutations","title":"Mutations","text":"<p>The GraphQL API is intentionally read-only. There are no mutations available to modify data.</p>"},{"location":"ecosystem/astral-api/graphql-api/#types","title":"Types","text":""},{"location":"ecosystem/astral-api/graphql-api/#locationproof","title":"<code>LocationProof</code>","text":"<p>Represents a location proof attestation.</p> <pre><code>type LocationProof {\n  uid: ID!\n  chain: String!\n  prover: String!\n  subject: String\n  timestamp: String\n  eventTimestamp: String!\n  srs: String\n  locationType: String!\n  location: String!\n  longitude: Float\n  latitude: Float\n  geometry: GeoJSONGeometry\n  recipeTypes: [String]\n  recipePayloads: [String]\n  mediaTypes: [String]\n  mediaData: [String]\n  memo: String\n  revoked: Boolean!\n  createdAt: String!\n  updatedAt: String!\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#geojsongeometry","title":"<code>GeoJSONGeometry</code>","text":"<p>Represents GeoJSON geometry data.</p> <pre><code>type GeoJSONGeometry {\n  type: String!\n  coordinates: JSON!\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#locationprooffilter","title":"<code>LocationProofFilter</code>","text":"<p>Input type for filtering location proofs.</p> <pre><code>input LocationProofFilter {\n  chain: String\n  prover: String\n  subject: String\n  fromTimestamp: String\n  toTimestamp: String\n  bbox: [Float]\n  limit: Int\n  offset: Int\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#locationproofstats","title":"<code>LocationProofStats</code>","text":"<p>Statistics about location proofs.</p> <pre><code>type LocationProofStats {\n  total: Int!\n  byChain: [ChainCount!]!\n}\n\ntype ChainCount {\n  chain: String!\n  count: Int!\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#example-queries","title":"Example Queries","text":""},{"location":"ecosystem/astral-api/graphql-api/#get-a-single-location-proof","title":"Get a single location proof","text":"<pre><code>query GetLocationProof {\n  locationProof(uid: \"0xa1d140a3243443eb10320d758235f633eb0db20a3374866f6f53001ac3fcd2c6\") {\n    uid\n    chain\n    prover\n    eventTimestamp\n    locationType\n    longitude\n    latitude\n    geometry {\n      type\n      coordinates\n    }\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#get-location-proofs-with-filtering","title":"Get location proofs with filtering","text":"<pre><code>query GetLocationProofs {\n  locationProofs(filter: {\n    chain: \"sepolia\",\n    limit: 5,\n    offset: 0\n  }) {\n    uid\n    chain\n    prover\n    eventTimestamp\n    locationType\n    revoked\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#get-location-proofs-with-spatial-filter","title":"Get location proofs with spatial filter","text":"<pre><code>query GetLocationProofsInArea {\n  locationProofs(filter: {\n    bbox: [-74.1, 40.6, -73.7, 40.9], # NYC area\n    limit: 10\n  }) {\n    uid\n    chain\n    prover\n    eventTimestamp\n    location\n    longitude\n    latitude\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#get-location-proof-statistics","title":"Get location proof statistics","text":"<pre><code>query GetStats {\n  locationProofsStats {\n    total\n    byChain {\n      chain\n      count\n    }\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#count-location-proofs-by-chain","title":"Count location proofs by chain","text":"<pre><code>query CountByChain {\n  arbitrum: locationProofsCount(filter: { chain: \"arbitrum\" })\n  sepolia: locationProofsCount(filter: { chain: \"sepolia\" })\n  base: locationProofsCount(filter: { chain: \"base\" })\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#integration-with-client-applications","title":"Integration with Client Applications","text":""},{"location":"ecosystem/astral-api/graphql-api/#javascript-example","title":"JavaScript Example","text":"<pre><code>async function fetchLocationProofs() {\n  const response = await fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: `\n        query GetRecentProofs {\n          locationProofs(filter: { limit: 10 }) {\n            uid\n            chain\n            prover\n            eventTimestamp\n            locationType\n            location\n            longitude\n            latitude\n          }\n        }\n      `,\n    }),\n  });\n\n  const result = await response.json();\n  return result.data.locationProofs;\n}\n</code></pre>"},{"location":"ecosystem/astral-api/graphql-api/#tools","title":"Tools","text":"<p>The GraphQL API includes introspection, allowing tools like GraphQL Playground and Apollo Studio Explorer to explore the schema and test queries.</p>"},{"location":"ecosystem/astral-api/ogc-api/","title":"OGC API Features Implementation","text":"<p>This document describes the OGC API Features implementation for the Astral Protocol Location Proof API.</p>"},{"location":"ecosystem/astral-api/ogc-api/#overview","title":"Overview","text":"<p>The OGC API Features standard defines a set of RESTful interfaces to access geospatial data following a standard approach. Our implementation allows accessing location proofs in GeoJSON format with spatial and temporal filtering capabilities.</p>"},{"location":"ecosystem/astral-api/ogc-api/#endpoints","title":"Endpoints","text":""},{"location":"ecosystem/astral-api/ogc-api/#landing-page","title":"Landing Page","text":"<pre><code>GET /api/ogc\n</code></pre> <p>Returns links to the available resources and API capabilities.</p>"},{"location":"ecosystem/astral-api/ogc-api/#conformance-declaration","title":"Conformance Declaration","text":"<pre><code>GET /api/ogc/conformance\n</code></pre> <p>Lists the conformance classes that the API conforms to.</p>"},{"location":"ecosystem/astral-api/ogc-api/#collections","title":"Collections","text":"<pre><code>GET /api/ogc/collections\n</code></pre> <p>Lists the available feature collections.</p>"},{"location":"ecosystem/astral-api/ogc-api/#collection-details","title":"Collection Details","text":"<pre><code>GET /api/ogc/collections/{collectionId}\n</code></pre> <p>Returns detailed information about a specific feature collection.</p>"},{"location":"ecosystem/astral-api/ogc-api/#features","title":"Features","text":"<pre><code>GET /api/ogc/collections/{collectionId}/items\n</code></pre> <p>Returns features from the specified collection. Supports filtering and pagination.</p>"},{"location":"ecosystem/astral-api/ogc-api/#single-feature","title":"Single Feature","text":"<pre><code>GET /api/ogc/collections/{collectionId}/items/{featureId}\n</code></pre> <p>Returns a specific feature from the collection.</p>"},{"location":"ecosystem/astral-api/ogc-api/#query-parameters","title":"Query Parameters","text":"<p>The following query parameters are supported for the features endpoint:</p>"},{"location":"ecosystem/astral-api/ogc-api/#core-parameters","title":"Core Parameters","text":"<ul> <li><code>limit</code>: Maximum number of features to return (default: 10, max: 1000)</li> <li><code>offset</code>: Number of features to skip (for pagination)</li> <li><code>bbox</code>: Bounding box filter in the format <code>minLon,minLat,maxLon,maxLat</code></li> <li><code>datetime</code>: Temporal filter, can be a specific time or a range:</li> <li>Specific time: <code>2023-03-01T12:00:00Z</code></li> <li>Time range: <code>2023-03-01T00:00:00Z/2023-03-31T23:59:59Z</code></li> <li>Open-ended range: <code>../2023-03-31T23:59:59Z</code> or <code>2023-03-01T00:00:00Z/..</code></li> </ul>"},{"location":"ecosystem/astral-api/ogc-api/#additional-parameters","title":"Additional Parameters","text":"<ul> <li><code>chain</code>: Filter by blockchain network (e.g. <code>arbitrum</code>, <code>base</code>, <code>sepolia</code>)</li> <li><code>prover</code>: Filter by proof creator address</li> </ul>"},{"location":"ecosystem/astral-api/ogc-api/#response-formats","title":"Response Formats","text":"<p>All responses are in JSON format. Feature responses use the GeoJSON format with appropriate content-type headers.</p>"},{"location":"ecosystem/astral-api/ogc-api/#geojson-features","title":"GeoJSON Features","text":"<p>Features are returned as GeoJSON objects with the following structure:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"id\": \"0x...\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [longitude, latitude]\n  },\n  \"properties\": {\n    \"chain\": \"sepolia\",\n    \"prover\": \"0x...\",\n    \"subject\": \"0x...\",\n    \"event_timestamp\": \"2023-03-01T12:00:00Z\",\n    \"location_type\": \"DecimalDegrees&lt;string&gt;\",\n    \"revoked\": false,\n    ...\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#geojson-feature-collections","title":"GeoJSON Feature Collections","text":"<p>Feature collections are returned as GeoJSON FeatureCollection objects:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [...],\n  \"links\": [...],\n  \"timeStamp\": \"2023-03-28T15:23:45Z\",\n  \"numberMatched\": 100,\n  \"numberReturned\": 10\n}\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#example-requests","title":"Example Requests","text":""},{"location":"ecosystem/astral-api/ogc-api/#get-all-location-proofs","title":"Get all location proofs","text":"<pre><code>GET /api/ogc/collections/location-proofs/items\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#get-location-proofs-within-a-bounding-box","title":"Get location proofs within a bounding box","text":"<pre><code>GET /api/ogc/collections/location-proofs/items?bbox=-74.1,40.6,-73.7,40.9\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#get-location-proofs-from-a-specific-time-range","title":"Get location proofs from a specific time range","text":"<pre><code>GET /api/ogc/collections/location-proofs/items?datetime=2023-01-01T00:00:00Z/2023-12-31T23:59:59Z\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#get-location-proofs-from-a-specific-blockchain","title":"Get location proofs from a specific blockchain","text":"<pre><code>GET /api/ogc/collections/location-proofs/items?chain=sepolia\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#combine-multiple-filters","title":"Combine multiple filters","text":"<pre><code>GET /api/ogc/collections/location-proofs/items?chain=sepolia&amp;bbox=-74.1,40.6,-73.7,40.9&amp;limit=20&amp;offset=40\n</code></pre>"},{"location":"ecosystem/astral-api/ogc-api/#references","title":"References","text":"<ul> <li>OGC API Features Specification</li> <li>GeoJSON Format</li> </ul>"},{"location":"ecosystem/astral-api/spatial-queries/","title":"Spatial Queries Guide","text":"<p>This guide explains how to use the spatial query features of the Astral API to find location proofs within specific geographic areas.</p>"},{"location":"ecosystem/astral-api/spatial-queries/#prerequisites","title":"Prerequisites","text":"<ol> <li>The Supabase PostgreSQL functions for spatial queries should already be created during the database setup process (see SUPABASE-SETUP.md).</li> <li>The <code>location_proofs</code> table should have geometry data stored in the <code>geometry</code> column.</li> </ol>"},{"location":"ecosystem/astral-api/spatial-queries/#using-bounding-box-queries","title":"Using Bounding Box Queries","text":"<p>A bounding box is defined by four coordinates that create a rectangular area on the map: - Minimum longitude (western boundary) - Minimum latitude (southern boundary) - Maximum longitude (eastern boundary) - Maximum latitude (northern boundary)</p>"},{"location":"ecosystem/astral-api/spatial-queries/#basic-bounding-box-query","title":"Basic Bounding Box Query","text":"<p>To query location proofs within a specific geographic area, use the <code>bbox</code> parameter:</p> <pre><code>import { supabaseService } from '../services/supabase.service';\nimport { LocationProofQueryParams } from '../models/types';\n\nasync function getProofsInSanFrancisco() {\n  const params: LocationProofQueryParams = {\n    // San Francisco area bounding box\n    bbox: [-122.5, 37.7, -122.3, 37.9], // [minLon, minLat, maxLon, maxLat]\n    limit: 100\n  };\n\n  const proofs = await supabaseService.queryLocationProofs(params);\n  return proofs;\n}\n</code></pre>"},{"location":"ecosystem/astral-api/spatial-queries/#combining-spatial-and-non-spatial-filters","title":"Combining Spatial and Non-Spatial Filters","text":"<p>You can combine spatial queries with other filters:</p> <pre><code>async function getProofsInLondonForSpecificUser(proverAddress: string) {\n  const params: LocationProofQueryParams = {\n    // London area bounding box\n    bbox: [-0.5, 51.3, 0.3, 51.7],\n    prover: proverAddress,\n    fromTimestamp: new Date('2023-01-01'),\n    limit: 50\n  };\n\n  const proofs = await supabaseService.queryLocationProofs(params);\n  return proofs;\n}\n</code></pre>"},{"location":"ecosystem/astral-api/spatial-queries/#getting-counts-of-proofs-in-an-area","title":"Getting Counts of Proofs in an Area","text":"<p>To get the count of proofs within a geographic area:</p> <pre><code>async function countProofsInNewYork() {\n  const params: LocationProofQueryParams = {\n    // New York City area bounding box\n    bbox: [-74.3, 40.5, -73.7, 40.9]\n  };\n\n  const count = await supabaseService.getLocationProofsCount(params);\n  return count;\n}\n</code></pre>"},{"location":"ecosystem/astral-api/spatial-queries/#common-bounding-boxes","title":"Common Bounding Boxes","text":"<p>Here are some common bounding boxes for major cities:</p> <ul> <li>San Francisco: <code>[-122.5, 37.7, -122.3, 37.9]</code></li> <li>New York City: <code>[-74.3, 40.5, -73.7, 40.9]</code></li> <li>London: <code>[-0.5, 51.3, 0.3, 51.7]</code></li> <li>Tokyo: <code>[139.5, 35.5, 140.0, 35.9]</code></li> <li>Sydney: <code>[150.9, -34.1, 151.3, -33.7]</code></li> </ul>"},{"location":"ecosystem/astral-api/spatial-queries/#using-supabase-client-directly","title":"Using Supabase Client Directly","text":"<p>If you need to access the spatial functions directly from a client application, you can use the Supabase JavaScript client:</p> <pre><code>import { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  'https://your-project-id.supabase.co',\n  'your-anon-key'\n)\n\n// Query with bounding box filter\nconst { data, error } = await supabase\n  .rpc('location_proofs_in_bbox', { \n    min_lng: -122.5, \n    min_lat: 37.7, \n    max_lng: -122.3, \n    max_lat: 37.9\n  })\n\n// Query with radius filter\nconst { data, error } = await supabase\n  .rpc('location_proofs_within', { \n    lng: -122.4, \n    lat: 37.8, \n    distance_meters: 5000\n  })\n</code></pre>"},{"location":"ecosystem/astral-api/spatial-queries/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Spatial queries can be more computation-intensive than regular queries</li> <li>For large datasets, consider adding additional filters to narrow down the results</li> <li>The <code>limit</code> parameter should be used to prevent returning too many results</li> <li>Use the appropriate spatial function for your needs:</li> <li><code>location_proofs_in_bbox</code> for rectangular areas (faster for large areas)</li> <li><code>location_proofs_within</code> for precise radius-based searches</li> </ul>"},{"location":"ecosystem/astral-api/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you troubleshoot common issues when using the Astral API.</p>"},{"location":"ecosystem/astral-api/troubleshooting/#common-api-errors","title":"Common API Errors","text":""},{"location":"ecosystem/astral-api/troubleshooting/#1-unable-to-connect-to-the-api","title":"1. Unable to Connect to the API","text":"<p>Symptoms: - Request timeout - Connection refused - Unable to resolve host</p> <p>Possible Causes: - API service may be down - Network connectivity issues - Incorrect API URL</p> <p>Solutions: - Check the API status at <code>https://api.astral.global/health</code> - Verify your internet connection - Ensure you're using the correct API URL - Try again later if the service is experiencing downtime</p>"},{"location":"ecosystem/astral-api/troubleshooting/#2-404-not-found-errors","title":"2. 404 Not Found Errors","text":"<p>Symptoms: - Response with status code 404 - Error message: <code>Cannot GET /path</code></p> <p>Possible Causes: - Incorrect endpoint URL - Endpoint does not exist - API version mismatch</p> <p>Solutions: - Double-check the endpoint URL in the API Reference - Ensure you're using the correct API version (v0) - Check for typos in the URL path</p> <p>Example of a correct endpoint: <pre><code>https://api.astral.global/api/v0/location-proofs\n</code></pre></p>"},{"location":"ecosystem/astral-api/troubleshooting/#3-400-bad-request-errors","title":"3. 400 Bad Request Errors","text":"<p>Symptoms: - Response with status code 400 - Error message related to invalid parameters</p> <p>Possible Causes: - Invalid query parameters - Malformed request body - Missing required parameters</p> <p>Solutions: - Check the API documentation for required and optional parameters - Ensure query parameters have the correct format - Validate any JSON in the request body</p> <p>Common parameter format issues: - Bounding box (bbox) should be an array of 4 numbers: <code>[minLng, minLat, maxLng, maxLat]</code> - Timestamps should be in ISO 8601 format: <code>2023-01-01T12:00:00Z</code> - Ethereum addresses should include the <code>0x</code> prefix</p>"},{"location":"ecosystem/astral-api/troubleshooting/#4-429-too-many-requests","title":"4. 429 Too Many Requests","text":"<p>Symptoms: - Response with status code 429 - \"Too many requests\" error message</p> <p>Possible Causes: - Exceeded rate limits - Too many requests in a short period</p> <p>Solutions: - Implement exponential backoff and retry logic - Reduce request frequency - Batch requests where possible</p> <p>Example retry logic: <pre><code>async function fetchWithRetry(url, options = {}, maxRetries = 3) {\n  let retries = 0;\n\n  while (retries &lt; maxRetries) {\n    try {\n      const response = await fetch(url, options);\n\n      if (response.status === 429) {\n        // Get retry-after header or use exponential backoff\n        const retryAfter = response.headers.get('retry-after') || Math.pow(2, retries) * 1000;\n        console.log(`Rate limited. Retrying after ${retryAfter}ms`);\n        await new Promise(resolve =&gt; setTimeout(resolve, retryAfter));\n        retries++;\n        continue;\n      }\n\n      return response;\n    } catch (error) {\n      retries++;\n      if (retries &gt;= maxRetries) throw error;\n\n      const delay = Math.pow(2, retries) * 1000;\n      console.log(`Request failed, retrying in ${delay}ms...`);\n      await new Promise(resolve =&gt; setTimeout(resolve, delay));\n    }\n  }\n}\n</code></pre></p>"},{"location":"ecosystem/astral-api/troubleshooting/#5-500-internal-server-error","title":"5. 500 Internal Server Error","text":"<p>Symptoms: - Response with status code 500 - Generic server error message</p> <p>Possible Causes: - Server-side issue - Database connection problems - Blockchain network issues</p> <p>Solutions: - Check the API status - Retry the request after a short delay - Report the issue if it persists</p>"},{"location":"ecosystem/astral-api/troubleshooting/#data-related-issues","title":"Data-Related Issues","text":""},{"location":"ecosystem/astral-api/troubleshooting/#1-missing-location-proofs","title":"1. Missing Location Proofs","text":"<p>Symptoms: - Empty results when querying location proofs - Fewer results than expected</p> <p>Possible Causes: - No data matching the query parameters - Sync process not completed - Recent attestations not yet indexed</p> <p>Solutions: - Check the sync status: <code>GET /api/sync/status</code> - Broaden your query parameters - Verify attestations exist on the blockchain - Wait for the next sync cycle to complete</p>"},{"location":"ecosystem/astral-api/troubleshooting/#2-incorrect-coordinates","title":"2. Incorrect Coordinates","text":"<p>Symptoms: - Location proofs have unexpected coordinates - Points appear in the wrong places on a map</p> <p>Possible Causes: - Coordinate order confusion (lat/lng vs lng/lat) - Different coordinate reference system - Data parsing issues</p> <p>Solutions: - Note that GeoJSON uses longitude, latitude order: <code>[lng, lat]</code> - Check the <code>srs</code> field to determine the coordinate reference system - Verify the location data in the original attestation</p>"},{"location":"ecosystem/astral-api/troubleshooting/#3-missing-or-invalid-geographic-data","title":"3. Missing or Invalid Geographic Data","text":"<p>Symptoms: - <code>null</code> values for longitude or latitude - Cannot perform spatial queries</p> <p>Possible Causes: - Original attestation missing geographic data - Malformed location data in attestation - Parsing errors during indexing</p> <p>Solutions: - Check if the original attestation contains valid location data - Use the <code>location</code> field which contains the raw GeoJSON - Filter out proofs with missing coordinates: <code>?filter=hasCoordinates</code></p>"},{"location":"ecosystem/astral-api/troubleshooting/#api-integration-issues","title":"API Integration Issues","text":""},{"location":"ecosystem/astral-api/troubleshooting/#1-cors-errors","title":"1. CORS Errors","text":"<p>Symptoms: - Browser console errors about CORS policy - Unable to access API from frontend applications</p> <p>Possible Causes: - Cross-Origin Resource Sharing restrictions - Missing CORS headers</p> <p>Solutions: - Use a CORS proxy for development - Implement a backend API service to make requests - Request CORS support from the API provider</p>"},{"location":"ecosystem/astral-api/troubleshooting/#2-performance-issues","title":"2. Performance Issues","text":"<p>Symptoms: - Slow API responses - Timeouts on large queries</p> <p>Possible Causes: - Large result sets - Complex spatial queries - Network latency</p> <p>Solutions: - Use pagination with <code>limit</code> and <code>offset</code> parameters - Add more specific filters to narrow results - Use the bbox parameter to limit geographic area - Implement caching for frequent queries</p> <p>Example pagination: <pre><code>async function getAllLocationProofs() {\n  const results = [];\n  let offset = 0;\n  const limit = 100;\n  let hasMore = true;\n\n  while (hasMore) {\n    const response = await fetch(`https://api.astral.global/api/v0/location-proofs?limit=${limit}&amp;offset=${offset}`);\n    const data = await response.json();\n\n    results.push(...data.data);\n\n    if (data.data.length &lt; limit) {\n      hasMore = false;\n    } else {\n      offset += limit;\n    }\n  }\n\n  return results;\n}\n</code></pre></p>"},{"location":"ecosystem/astral-api/troubleshooting/#3-data-format-inconsistencies","title":"3. Data Format Inconsistencies","text":"<p>Symptoms: - Unexpected data structure - Missing fields - Type errors in application code</p> <p>Possible Causes: - API changes - Different data sources - Optional fields that are sometimes null</p> <p>Solutions: - Implement defensive parsing with fallbacks - Validate API responses before processing - Use TypeScript or JSON Schema to define expected structures</p> <p>Example defensive parsing: <pre><code>function parseLocationProof(proof) {\n  return {\n    id: proof.uid || '',\n    chain: proof.chain || 'unknown',\n    location: {\n      latitude: proof.latitude || null,\n      longitude: proof.longitude || null,\n      type: proof.location_type || 'unknown'\n    },\n    timestamp: proof.event_timestamp ? new Date(proof.event_timestamp) : null,\n    prover: proof.prover || '',\n    // Always provide fallbacks for optional fields\n  };\n}\n</code></pre></p>"},{"location":"ecosystem/astral-api/troubleshooting/#blockchain-specific-issues","title":"Blockchain-Specific Issues","text":""},{"location":"ecosystem/astral-api/troubleshooting/#1-chain-sync-delays","title":"1. Chain Sync Delays","text":"<p>Symptoms: - Recently created attestations not appearing - Missing data for specific chains</p> <p>Possible Causes: - Sync process delay - Blockchain network issues - EAS indexer delays</p> <p>Solutions: - Check sync status for specific chains - Trigger a manual sync: <code>POST /api/sync?chain=sepolia</code> - Wait for the next automatic sync cycle</p>"},{"location":"ecosystem/astral-api/troubleshooting/#2-revoked-attestations","title":"2. Revoked Attestations","text":"<p>Symptoms: - Attestations marked as revoked - Data no longer accessible</p> <p>Possible Causes: - Attestation revoked by the original attester - Fraudulent or erroneous attestation</p> <p>Solutions: - Check revocation status: <code>GET /api/v0/location-proofs/:uid</code> - Include or exclude revoked attestations with the <code>includeRevoked</code> parameter - Verify revocation status on the blockchain</p>"},{"location":"ecosystem/astral-api/troubleshooting/#sync-issues","title":"Sync Issues","text":""},{"location":"ecosystem/astral-api/troubleshooting/#1-automatic-sync-not-working","title":"1. Automatic Sync Not Working","text":"<p>Symptoms: - New attestations not appearing in the API - Status endpoint shows no recent syncs</p> <p>Possible Causes: - Cron job issues - Service configuration problems - Database connection issues</p> <p>Solutions: - Check sync status: <code>GET /api/sync/status</code> - Manually trigger a sync: <code>POST /api/cron/sync</code> - Test endpoint availability: <code>GET /api/cron/sync/test</code> - Wait for the automatic sync (runs every minute)</p>"},{"location":"ecosystem/astral-api/troubleshooting/#2-revocation-checks-not-updated","title":"2. Revocation Checks Not Updated","text":"<p>Symptoms: - Revoked attestations still show as valid - Revocation status isn't current</p> <p>Possible Causes: - Revocation checking temporarily disabled - Sync job not completing fully</p> <p>Solutions: - Check the API status for information about revocation checking - Manually check revocation status on-chain - Wait for the next sync cycle when revocation checks are enabled</p>"},{"location":"ecosystem/astral-api/troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter persistent issues that aren't covered in this guide:</p> <ol> <li>Check if the issue is already reported in the GitHub issues</li> <li>Create a new issue with:</li> <li>Detailed description of the problem</li> <li>Steps to reproduce</li> <li>API endpoint and parameters used</li> <li>Error messages and response codes</li> <li>Your environment (browser, OS, etc.)</li> <li>For urgent issues, contact the team through official support channels</li> </ol>"},{"location":"ecosystem/astral-api/troubleshooting/#api-status","title":"API Status","text":"<p>You can check the current API status at: <pre><code>GET https://api.astral.global/health\n</code></pre></p> <p>For more detailed status information, including sync status: <pre><code>GET https://api.astral.global/api/sync/status\n</code></pre></p> <p>To verify the cron endpoint is correctly configured: <pre><code>GET https://api.astral.global/api/cron/sync/test\n</code></pre></p>"},{"location":"ecosystem/astral-sdk/","title":"Introduction","text":"<p>Create, store, and verify location attestations on any blockchain.</p> <p>Astral SDK is a developer-friendly TypeScript library that makes location-based attestations simple. Built on Ethereum Attestation Service (EAS), it supports both gasless offchain signatures and permanent onchain registration across multiple networks.</p>"},{"location":"ecosystem/astral-sdk/#quick-navigation","title":"Quick Navigation","text":""},{"location":"ecosystem/astral-sdk/#getting-started","title":"Getting Started","text":"<ul> <li>Core Concepts - Key terminology and concepts</li> <li>Quick Start - 30-second example</li> <li>Getting Started Guide - Complete tutorial</li> </ul>"},{"location":"ecosystem/astral-sdk/#workflows","title":"Workflows","text":"<ul> <li>Offchain Workflow - Gasless EIP-712 signatures</li> <li>Onchain Workflow - Permanent blockchain records</li> </ul>"},{"location":"ecosystem/astral-sdk/#reference","title":"Reference","text":"<ul> <li>SDK API Reference - Complete method documentation</li> <li>Extensions Guide - Extension system overview</li> </ul>"},{"location":"ecosystem/astral-sdk/#why-astral-sdk","title":"Why Astral SDK?","text":""},{"location":"ecosystem/astral-sdk/#two-ways-to-create-location-attestations","title":"Two ways to create location attestations","text":"<ul> <li>Offchain: Gasless EIP-712 signatures, instant verification</li> <li>Onchain: Permanent blockchain registration with smart contract integration</li> </ul>"},{"location":"ecosystem/astral-sdk/#supported-location-formats","title":"Supported location formats","text":"<ul> <li>GeoJSON (Points, Polygons, Features) - \u25a0 Available now</li> <li>Decimal coordinates <code>[lng, lat]</code> - \u25a1 Coming soon</li> <li>Well-Known Text (WKT) - \u25a1 Coming soon</li> <li>H3 geospatial indexing - \u25a1 Coming soon</li> </ul>"},{"location":"ecosystem/astral-sdk/#multi-chain-ready","title":"Multi-chain ready","text":"<ul> <li>Sepolia (testnet) \u2022 Base \u2022 Arbitrum \u2022 Celo</li> </ul>"},{"location":"ecosystem/astral-sdk/#developer-experience","title":"Developer experience","text":"<ul> <li>100% TypeScript with full type safety</li> <li>Clear workflow separation (no confusion)</li> <li>Comprehensive docs and working examples</li> </ul>"},{"location":"ecosystem/astral-sdk/#installation","title":"Installation","text":"<pre><code>pnpm add @decentralized-geo/astral-sdk  # or npm/yarn\n</code></pre>"},{"location":"ecosystem/astral-sdk/#30-second-example","title":"30-Second Example","text":"<pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\n\n// Connect to your wallet\nconst sdk = new AstralSDK({\n  provider: window.ethereum,\n  defaultChain: \"sepolia\",\n});\n\n// Create a location attestation\nconst attestation = await sdk.createOffchainLocationAttestation({\n  location: [-0.163808, 51.5101], // London coordinates\n  memo: \"Visited Big Ben today!\",\n});\n\n// \u2705 Done! You have a cryptographically signed location attestation\nconsole.log(\"Attestation UID:\", attestation.uid);\n</code></pre>"},{"location":"ecosystem/astral-sdk/#whats-next","title":"What's Next?","text":"<ol> <li>New to location attestations? Start with Core Concepts</li> <li>Want to build something? Try the Getting Started Guide</li> </ol>"},{"location":"ecosystem/astral-sdk/extensions/","title":"Astral SDK Extensions","text":"<p>This document provides information about the extension system in the Astral SDK.</p>"},{"location":"ecosystem/astral-sdk/extensions/#overview","title":"Overview","text":"<p>The Astral SDK uses an extension system to support different location formats and media types. This allows for flexibility and extensibility while maintaining a consistent API.</p>"},{"location":"ecosystem/astral-sdk/extensions/#supported-formats-in-mvp","title":"Supported Formats in MVP","text":""},{"location":"ecosystem/astral-sdk/extensions/#location-formats","title":"Location Formats","text":"<ul> <li>GeoJSON: The primary location format supporting all GeoJSON types (Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, Feature, FeatureCollection)</li> </ul>"},{"location":"ecosystem/astral-sdk/extensions/#media-types","title":"Media Types","text":"<ul> <li>Images: JPEG and PNG formats</li> </ul>"},{"location":"ecosystem/astral-sdk/extensions/#planned-future-extensions","title":"Planned Future Extensions","text":"<p>Additional formats planned for v0.1:</p>"},{"location":"ecosystem/astral-sdk/extensions/#location-formats_1","title":"Location Formats","text":"<ul> <li>Coordinate: Decimal coordinates in array and object format</li> <li>WKT: Well-Known Text format</li> <li>H3: Hexagonal hierarchical geospatial indexing</li> </ul>"},{"location":"ecosystem/astral-sdk/extensions/#media-types_1","title":"Media Types","text":"<ul> <li>Video: MP4 format</li> <li>Audio: MP3 format</li> <li>Documents: PDF format</li> </ul>"},{"location":"ecosystem/astral-sdk/extensions/#extension-id-format","title":"Extension ID Format","text":"<p>Extensions follow a URI-like namespace pattern:</p> <pre><code>astral:&lt;extension-type&gt;:&lt;format&gt;\n</code></pre> <p>For example: - <code>astral:location:geojson</code> - GeoJSON location format extension - <code>astral:media:image</code> - Image media type extension</p> <p>This format provides a hierarchical structure that can be extended in the future.</p>"},{"location":"ecosystem/astral-sdk/extensions/#using-extensions-in-the-sdk","title":"Using Extensions in the SDK","text":"<p>Extensions are automatically registered when you create an SDK instance:</p> <pre><code>// Create a new SDK instance\nconst sdk = new AstralSDK();\n\n// SDK will automatically use the appropriate extensions based on the data format\nconst unsignedProof = await sdk.buildLocationProof({\n  location: {\n    type: 'Point',\n    coordinates: [12.34, 56.78]\n  },\n  memo: 'Using GeoJSON format'\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/extensions/#format-detection-and-conversion","title":"Format Detection and Conversion","text":"<p>The SDK can automatically detect the format of location data:</p> <pre><code>// Format will be auto-detected as 'geojson'\nconst unsignedProof = await sdk.buildLocationProof({\n  location: {\n    type: 'Point',\n    coordinates: [12.34, 56.78]\n  }\n});\n</code></pre> <p>You can also specify a target format for conversion:</p> <pre><code>// In future versions, this will convert between different formats\nconst unsignedProof = await sdk.buildLocationProof({\n  location: {\n    type: 'Point',\n    coordinates: [12.34, 56.78]\n  },\n  targetLocationFormat: 'wkt'  // Convert to WKT format\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/extensions/#adding-media-attachments","title":"Adding Media Attachments","text":"<p>You can include media attachments in your location proofs:</p> <pre><code>const unsignedProof = await sdk.buildLocationProof({\n  location: {\n    type: 'Point',\n    coordinates: [12.34, 56.78]\n  },\n  media: [\n    {\n      mediaType: 'image/jpeg',\n      data: '...base64-encoded-data...'\n    }\n  ]\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/extensions/#advanced-usage","title":"Advanced Usage","text":""},{"location":"ecosystem/astral-sdk/extensions/#extension-registry","title":"Extension Registry","text":"<p>You can access the extension registry through the SDK instance:</p> <pre><code>// Get all registered location extensions\nconst locationExtensions = sdk.extensions.getAllLocationExtensions();\n\n// Get all registered media extensions\nconst mediaExtensions = sdk.extensions.getAllMediaExtensions();\n\n// Get an extension for a specific format\nconst geoJsonExtension = sdk.extensions.getLocationExtension('geojson');\nconst jpegExtension = sdk.extensions.getMediaExtension('image/jpeg');\n</code></pre>"},{"location":"ecosystem/astral-sdk/extensions/#custom-extensions","title":"Custom Extensions","text":"<p>You can register custom extensions:</p> <pre><code>// Create a custom location extension\nclass MyCustomLocationExtension extends BaseExtension implements LocationTypeExtension {\n  readonly id = 'astral:location:custom';\n  readonly name = 'My Custom Format';\n  readonly description = 'Handles a custom location format';\n  readonly locationType = 'custom';\n\n  // Implement required methods...\n}\n\n// Register the custom extension\nsdk.extensions.registerLocationExtension(new MyCustomLocationExtension());\n</code></pre>"},{"location":"ecosystem/astral-sdk/extensions/#extension-development","title":"Extension Development","text":"<p>When implementing a new extension, you need to follow these interfaces:</p>"},{"location":"ecosystem/astral-sdk/extensions/#location-format-extensions","title":"Location Format Extensions","text":"<p>Implement the <code>LocationTypeExtension</code> interface:</p> <pre><code>interface LocationTypeExtension extends BaseExtension {\n  readonly locationType: string;\n  validateLocation(location: unknown): boolean;\n  locationToString(location: unknown): string;\n  locationToGeoJSON(location: unknown): object;\n  parseLocationString(locationString: string): unknown;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/extensions/#media-type-extensions","title":"Media Type Extensions","text":"<p>Implement the <code>MediaAttachmentExtension</code> interface:</p> <pre><code>interface MediaAttachmentExtension extends BaseExtension {\n  readonly supportedMediaTypes: string[];\n  validateMedia(mediaType: string, data: string): boolean;\n  processMedia(mediaType: string, data: string): string;\n  supportsMediaType(mediaType: string): boolean;\n}\n</code></pre> <p>See the existing extensions in <code>src/extensions/location/builtins/</code> and <code>src/extensions/media/builtins/</code> for examples.</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/","title":"Geospatial Concepts for Web3 Developers","text":"<p>If you're comfortable with blockchain and Web3 but new to spatial data, this guide covers what you need to know to work with location-based applications.</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#what-is-spatial-data","title":"What is Spatial Data?","text":"<p>Spatial data represents the location, shape, and characteristics of features on Earth (or other surfaces). Every feature has:</p> <ul> <li>Geometry: Where it is (coordinates, shapes)</li> <li>Attributes: What it is (properties, metadata)</li> <li>Relationships: How it relates to other features</li> </ul> <p>Think of it like a database where every record has a \"location\" column that contains geometric information instead of just text or numbers.</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#coordinate-systems","title":"Coordinate Systems","text":"<p>All locations need a coordinate reference system to make sense:</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#geographic-coordinates-most-common","title":"Geographic Coordinates (Most Common)","text":"<ul> <li>Longitude: East-West position (-180\u00b0 to +180\u00b0)</li> <li>Latitude: North-South position (-90\u00b0 to +90\u00b0)  </li> <li>Order: Always <code>[longitude, latitude]</code> in GeoJSON (like <code>[x, y]</code>)</li> </ul> <pre><code>// London coordinates\nconst london = {\n  type: 'Point',\n  coordinates: [-0.1276, 51.5074] // [longitude, latitude]\n};\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#important-notes","title":"Important Notes","text":"<ul> <li>Longitude first: This trips up many developers! Unlike \"lat, lng\" in some mapping libraries, GeoJSON uses <code>[lng, lat]</code></li> <li>Decimal degrees: Modern systems use decimal numbers, not degrees/minutes/seconds</li> <li>WGS84: The global standard coordinate system (GPS uses this)</li> </ul>"},{"location":"ecosystem/astral-sdk/background/geospatial/#geojson-format","title":"GeoJSON Format","text":"<p>GeoJSON is the de facto standard for spatial data on the web. It's just JSON with specific structure for geometry:</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#basic-geometries","title":"Basic Geometries","text":"<pre><code>// Point - single location\n{\n  type: 'Point',\n  coordinates: [139.6917, 35.6895] // Tokyo\n}\n\n// LineString - connected path  \n{\n  type: 'LineString',\n  coordinates: [\n    [lng1, lat1], [lng2, lat2], [lng3, lat3]\n  ]\n}\n\n// Polygon - enclosed area\n{\n  type: 'Polygon',\n  coordinates: [[\n    [lng1, lat1], [lng2, lat2], [lng3, lat3], [lng1, lat1] // Must close!\n  ]]\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#features-with-metadata","title":"Features with Metadata","text":"<pre><code>// Feature - geometry + properties\n{\n  type: 'Feature',\n  properties: {\n    name: 'Central Park',\n    area_hectares: 341,\n    established: 1857\n  },\n  geometry: {\n    type: 'Polygon',\n    coordinates: [/* polygon coordinates */]\n  }\n}\n\n// FeatureCollection - multiple features\n{\n  type: 'FeatureCollection',\n  features: [feature1, feature2, feature3]\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#spatial-data-types","title":"Spatial Data Types","text":""},{"location":"ecosystem/astral-sdk/background/geospatial/#vector-data-what-astral-sdk-uses","title":"Vector Data (What Astral SDK Uses)","text":"<p>Discrete features represented as points, lines, and polygons:</p> <ul> <li>Points: GPS coordinates, sensors, landmarks, events</li> <li>Lines: Roads, trails, pipelines, boundaries  </li> <li>Polygons: Buildings, parks, administrative areas, watersheds</li> </ul>"},{"location":"ecosystem/astral-sdk/background/geospatial/#raster-data-imagesgrids","title":"Raster Data (Images/Grids)","text":"<p>Continuous data in pixel/cell format: - Satellite imagery, elevation models, weather data - Not directly supported in current Astral SDK (coming later)</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#common-spatial-operations","title":"Common Spatial Operations","text":"<p>Understanding these concepts helps you work with location attestations:</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#containment","title":"Containment","text":"<p>\"Is this point inside this polygon?\" <pre><code>// Useful for: \"Was this GPS reading inside the authorized zone?\"\n</code></pre></p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#distance","title":"Distance","text":"<p>\"How far apart are these locations?\" <pre><code>// Useful for: \"Are these two attestations close enough to be the same place?\"\n</code></pre></p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#buffering","title":"Buffering","text":"<p>\"Create an area around this point/line\" <pre><code>// Useful for: \"Create a 100m radius around this monitoring station\"\n</code></pre></p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#precision-and-accuracy","title":"Precision and Accuracy","text":"<p>Precision: How many decimal places in coordinates - 1 decimal place \u2248 11 km - 2 decimal places \u2248 1.1 km - 3 decimal places \u2248 110 m - 4 decimal places \u2248 11 m - 5 decimal places \u2248 1.1 m</p> <p>Accuracy: How close coordinates are to reality - GPS: Usually 3-5 meters accuracy - Survey equipment: Centimeter accuracy - Cell phone: 10-50 meters accuracy</p> <p>Choose precision that matches your accuracy - don't use 8 decimal places for cell phone GPS!</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#spatial-reference-systems","title":"Spatial Reference Systems","text":"<p>EPSG:4326 (WGS84) is the global standard that Astral SDK uses by default. You might encounter others:</p> <ul> <li>EPSG:3857: Web Mercator (Google Maps, most web maps)</li> <li>EPSG:4269: NAD83 (North America)</li> <li>Local projections: Country or region-specific systems</li> </ul> <p>For most applications, stick with WGS84 (EPSG:4326) unless you have specific requirements.</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#working-with-spatial-libraries","title":"Working with Spatial Libraries","text":"<p>Astral SDK integrates well with popular spatial libraries:</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#turfjs-javascript","title":"Turf.js (JavaScript)","text":"<pre><code>import * as turf from '@turf/turf';\n\n// Validate GeoJSON before creating attestation\nconst point = { type: 'Point', coordinates: [lng, lat] };\nif (turf.booleanValid(point)) {\n  const attestation = await sdk.createOffchainLocationAttestation({\n    location: point,\n    memo: 'Validated coordinate'\n  });\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#mapboxleaflet-integration","title":"Mapbox/Leaflet Integration","text":"<pre><code>// From map click to attestation\nmap.on('click', async (e) =&gt; {\n  const attestation = await sdk.createOffchainLocationAttestation({\n    location: {\n      type: 'Point', \n      coordinates: [e.lngLat.lng, e.lngLat.lat]\n    },\n    memo: 'User-selected location'\n  });\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#common-spatial-data-sources","title":"Common Spatial Data Sources","text":"<p>Open Data: - OpenStreetMap (global mapping data) - Natural Earth (country/state boundaries) - Government open data portals</p> <p>Commercial: - Google Maps API - Mapbox datasets - Esri ArcGIS services</p> <p>Sensors: - GPS devices - IoT environmental sensors - Mobile phone location services</p>"},{"location":"ecosystem/astral-sdk/background/geospatial/#spatial-data-quality","title":"Spatial Data Quality","text":"<p>When creating location attestations, consider:</p> <p>Completeness: Do you have all required coordinates?</p> <p>Consistency: Are coordinates in the expected range and format?</p> <p>Accuracy: Does the precision match your data source quality?</p> <p>Temporal: When was this location data collected?</p> <pre><code>// Example validation before attestation\nfunction validateLocation(coordinates: [number, number]) {\n  const [lng, lat] = coordinates;\n\n  if (lng &lt; -180 || lng &gt; 180) throw new Error('Invalid longitude');\n  if (lat &lt; -90 || lat &gt; 90) throw new Error('Invalid latitude');\n\n  // Check precision matches expected accuracy\n  const precision = lng.toString().split('.')[1]?.length || 0;\n  if (precision &gt; 6) console.warn('Unusually high precision for GPS data');\n\n  return true;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#location-privacy-considerations","title":"Location Privacy Considerations","text":"<p>Spatial data is sensitive! Consider:</p> <p>Exact vs. approximate: Do you need precise coordinates or general area?</p> <p>Aggregation: Can you use areas instead of points?</p> <p>Temporal granularity: Hourly vs. daily vs. weekly data?</p> <p>Access control: Who should be able to see this location data?</p> <pre><code>// Example: Reduce precision for privacy\nfunction reduceLocationPrecision(coordinates: [number, number], precision = 3) {\n  return coordinates.map(coord =&gt; \n    parseFloat(coord.toFixed(precision))\n  ) as [number, number];\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#integration-patterns","title":"Integration Patterns","text":""},{"location":"ecosystem/astral-sdk/background/geospatial/#from-spatial-database-to-attestation","title":"From Spatial Database to Attestation","text":"<pre><code>// PostGIS/PostgreSQL example\nconst query = `\n  SELECT \n    ST_AsGeoJSON(geom)::json as geometry,\n    site_id,\n    measurement_type,\n    recorded_at\n  FROM sensor_readings \n  WHERE recorded_at &gt;= NOW() - INTERVAL '1 hour'\n`;\n\nconst results = await db.query(query);\n\nfor (const row of results) {\n  await sdk.createOffchainLocationAttestation({\n    location: row.geometry,\n    memo: `${row.measurement_type} from sensor ${row.site_id}`,\n    timestamp: row.recorded_at\n  });\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#from-web-map-to-attestation","title":"From Web Map to Attestation","text":"<pre><code>// Leaflet example\nconst map = L.map('map');\n\nmap.on('click', async (e) =&gt; {\n  const attestation = await sdk.createOffchainLocationAttestation({\n    location: {\n      type: 'Point',\n      coordinates: [e.latlng.lng, e.latlng.lat] // Note: Leaflet uses lat,lng\n    },\n    memo: 'User-marked location'\n  });\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/geospatial/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start - Create your first spatial attestation</li> <li>Getting Started Guide - Complete tutorial with examples</li> <li>Web3 Concepts - If you want to understand the blockchain side too</li> </ul> <p>Understanding these spatial fundamentals will help you build more effective location-based applications with Astral SDK!</p>"},{"location":"ecosystem/astral-sdk/background/web3/","title":"Web3 Concepts for Geospatial Developers","text":"<p>If you're comfortable with spatial data but new to blockchain and Web3 concepts, this guide covers what you need to know to work with Astral SDK.</p>"},{"location":"ecosystem/astral-sdk/background/web3/#what-is-web3","title":"What is Web3?","text":"<p>Web3 represents a vision for the internet built on three core principles:</p>"},{"location":"ecosystem/astral-sdk/background/web3/#open","title":"\u2192 Open","text":"<p>\u2022 Open protocols - Anyone can build on and interact with the system \u2022 Open source - Code is transparent and auditable \u2022 Open participation - No gatekeepers or permission required</p>"},{"location":"ecosystem/astral-sdk/background/web3/#durable","title":"\u2192 Durable","text":"<p>\u2022 Persistent data - Information survives beyond any single organization \u2022 Decentralized storage - No single point of failure \u2022 Cryptographic integrity - Data cannot be tampered with</p>"},{"location":"ecosystem/astral-sdk/background/web3/#consensual","title":"\u2192 Consensual","text":"<p>\u2022 User sovereignty - You control your own data and identity \u2022 Explicit permissions - Clear consent for data usage \u2022 Verifiable actions - Every action has cryptographic proof</p>"},{"location":"ecosystem/astral-sdk/background/web3/#web3-for-location-data","title":"Web3 for Location Data","text":"<p>These principles transform how we work with spatial information:</p> <p>\u203b Location data becomes portable - Not locked in proprietary systems \u203b Provenance is built-in - Every record has verifiable authorship \u203b Trust is mathematical - No need to trust institutions for verification</p> <p>Blockchains are one tool for achieving these principles, but Web3 encompasses more: decentralized storage (IPFS), peer-to-peer networks, cryptographic proofs, and user-controlled identity.</p>"},{"location":"ecosystem/astral-sdk/background/web3/#ethereum-and-eas","title":"Ethereum and EAS","text":"<p>Ethereum is a blockchain network that allows programmable transactions through \"smart contracts\" - code that runs on the blockchain.</p> <p>EAS (Ethereum Attestation Service) is a smart contract system that provides a standard way to create verifiable claims about anything. Think of it as a universal \"digital notary\" that can verify statements like:</p> <ul> <li>\"This GPS coordinate was recorded at this time\"</li> <li>\"This polygon represents a protected area boundary\"</li> <li>\"This sensor reading came from this location\"</li> </ul> <p>Astral SDK uses EAS as its foundation, but the Location Protocol itself can work with other verification systems.</p>"},{"location":"ecosystem/astral-sdk/background/web3/#cryptographic-signatures","title":"Cryptographic Signatures","text":"<p>Instead of usernames and passwords, Web3 uses cryptographic key pairs:</p> <ul> <li>Private key: Secret key only you know (like a super-secure password)</li> <li>Public key/Address: Your public identifier (like an email address)</li> <li>Digital signature: Proof that you authorized something</li> </ul> <p>When you sign a location attestation, you're creating mathematical proof that you created that record. Anyone can verify this without trusting a central authority.</p> <pre><code>// When you sign an attestation:\nconst attestation = await sdk.createOffchainLocationAttestation({\n  location: { type: \"Point\", coordinates: [lng, lat] },\n  memo: \"Field survey point\",\n});\n// Results in: cryptographic signature + your public address + the data\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/web3/#wallets","title":"Wallets","text":"<p>A wallet is software that manages your private keys and interacts with blockchain networks. Popular wallets include:</p> <ul> <li>MetaMask (browser extension)</li> <li>WalletConnect (mobile wallets)</li> <li>Hardware wallets (Ledger, Trezor)</li> </ul> <p>For Astral SDK, you connect your wallet to sign attestations. The wallet handles the cryptography - you just approve transactions.</p>"},{"location":"ecosystem/astral-sdk/background/web3/#offchain-vs-onchain","title":"Offchain vs Onchain","text":"<p>This is a key concept for understanding how Astral SDK works:</p>"},{"location":"ecosystem/astral-sdk/background/web3/#offchain-eip-712-signatures","title":"Offchain (EIP-712 Signatures)","text":"<ul> <li>Like: Signing a document with a notary stamp</li> <li>Process: Create attestation \u2192 Sign with wallet \u2192 Store wherever you want</li> <li>Cost: Free (no blockchain transaction)</li> <li>Speed: Instant</li> <li>Verification: Anyone can check the signature matches your address</li> </ul>"},{"location":"ecosystem/astral-sdk/background/web3/#onchain-blockchain-transactions","title":"Onchain (Blockchain Transactions)","text":"<ul> <li>Like: Filing an official document with a government registry</li> <li>Process: Create attestation \u2192 Submit transaction \u2192 Permanent blockchain record</li> <li>Cost: Gas fees (usually $0.10 - $10 depending on network)</li> <li>Speed: 10 seconds to minutes (depending on network)</li> <li>Verification: Built into the blockchain, accessible by smart contracts</li> </ul>"},{"location":"ecosystem/astral-sdk/background/web3/#networks-and-gas","title":"Networks and Gas","text":"<p>Blockchain networks are different \"versions\" of the decentralized system:</p> Network Type Purpose Gas Cost Sepolia Testnet Development/testing Free Ethereum Mainnet Production (expensive) $5-50 per transaction Base Layer 2 Production (cheap) $0.01-0.10 per transaction Arbitrum Layer 2 Production (cheap) $0.01-0.10 per transaction <p>Gas is the fee you pay for blockchain transactions. Think of it as postage for sending mail through the blockchain network.</p> <p>Testnet networks use fake money for development - perfect for learning and testing.</p>"},{"location":"ecosystem/astral-sdk/background/web3/#smart-contracts","title":"Smart Contracts","text":"<p>Smart contracts are programs that run on the blockchain. They can:</p> <ul> <li>Automatically execute when conditions are met</li> <li>Hold and transfer funds</li> <li>Read and write data</li> <li>Interact with other contracts</li> </ul> <p>For spatial applications, smart contracts might:</p> <ul> <li>Verify location attestations before releasing payments</li> <li>Automatically update maps when boundaries change</li> <li>Reward users for contributing accurate location data</li> </ul>"},{"location":"ecosystem/astral-sdk/background/web3/#integration-with-your-spatial-stack","title":"Integration with Your Spatial Stack","text":"<p>Astral SDK integrates with existing geospatial tools:</p> <pre><code>// From PostGIS query to blockchain attestation\nconst gisQuery = `\n  SELECT ST_AsGeoJSON(geom) as location, site_name, survey_date \n  FROM field_surveys \n  WHERE survey_date = '2024-01-15'\n`;\n\nconst results = await database.query(gisQuery);\n\nfor (const row of results) {\n  const attestation = await sdk.createOffchainLocationAttestation({\n    location: JSON.parse(row.location),\n    memo: `Field survey: ${row.site_name}`,\n    timestamp: row.survey_date,\n  });\n\n  // Now you have a verifiable, portable record\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/background/web3/#key-benefits-for-geospatial-work","title":"Key Benefits for Geospatial Work","text":"<p>Interoperability: Location attestations work across different applications and organizations</p> <p>Attribution: Always know who created spatial data and when</p> <p>Integrity: Detect if spatial data has been modified or corrupted</p> <p>Decentralization: No vendor lock-in or single points of failure</p> <p>Transparency: Audit trails for sensitive spatial data (environmental monitoring, land rights, etc.)</p>"},{"location":"ecosystem/astral-sdk/background/web3/#getting-started","title":"Getting Started","text":"<ol> <li>Install a wallet (MetaMask is easiest for development)</li> <li>Get test ETH from a faucet for Sepolia testnet</li> <li>Try the offchain workflow first (no gas required)</li> <li>Move to onchain when you need permanent records</li> </ol> <p>The beauty of Web3 is that once you understand these concepts, they work the same way across all decentralized applications - not just spatial ones.</p>"},{"location":"ecosystem/astral-sdk/background/web3/#external-resources","title":"External Resources","text":""},{"location":"ecosystem/astral-sdk/background/web3/#learn-more","title":"\u2192 Learn More","text":"<p>\u2022 Ethereum.org Wallets Guide - Overview and security tips \u2022 Set up Development Environment - Testnets and local nodes \u2022 Hello World Smart Contract - Wallet + testnet + deploy tutorial</p>"},{"location":"ecosystem/astral-sdk/background/web3/#track-costs","title":"\u2192 Track Costs","text":"<p>\u2022 L2Fees.info - Real-time Layer 2 fee dashboard \u2022 L2Beat Activity - Base &amp; Arbitrum TPS numbers</p>"},{"location":"ecosystem/astral-sdk/background/web3/#dive-deeper","title":"\u2192 Dive Deeper","text":"<p>\u2022 EAS Documentation - Ethereum Attestation Service \u2022 IPFS Documentation - Decentralized storage \u2022 Web3 Design Principles - UX best practices</p>"},{"location":"ecosystem/astral-sdk/background/web3/#next-steps","title":"Next Steps","text":"<p>\u2022 Quick Start - Create your first attestation in 30 seconds \u2022 Getting Started Guide - Complete tutorial with wallet setup \u2022 Geospatial Concepts - If you want to understand the spatial data side too</p>"},{"location":"ecosystem/astral-sdk/core-concepts/","title":"Core Concepts","text":"<p>Understanding these key concepts will help you work effectively with Astral SDK and the Location Protocol.</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#quick-navigation","title":"Quick Navigation","text":"<p>New to this area? Choose your background:</p> <ul> <li>Web3 Concepts - For geospatial developers who need blockchain context</li> <li>Geospatial Concepts - For Web3 developers who need spatial data context</li> <li>Quick Start - Jump straight to code examples</li> </ul> <p>Learn more about the protocol: Location Protocol Specification</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#location-attestations","title":"Location Attestations","text":"<p>A location attestation is a cryptographically signed, structured spatial record. It can represent any location in any spatial or symbolic reference system - like a row in a spatial database, but portable and cryptographically verifiable.</p> <p>Location attestations can describe:</p> <ul> <li>Geographic features: Trail runs, monuments, geocache coordinates, watershed boundaries</li> <li>Administrative areas: Local authority boundaries, event venue perimeters, protected zones</li> <li>Infrastructure: Transportation networks, utility installations, monitoring stations</li> <li>Events: Timestamped spatial occurrences, environmental measurements, asset movements</li> <li>Claims: \"I was here at this time\" (though this is just one use case among many)</li> </ul> <p>All records are signed to ensure integrity and authorship, and can be shared publicly, held privately, or disclosed selectively.</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#two-workflows-offchain-vs-onchain","title":"Two Workflows: Offchain vs Onchain","text":"<p>Astral SDK provides two distinct ways to create location attestations, each optimized for different use cases:</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#offchain-workflow","title":"\u2192 Offchain Workflow","text":"<p>What it is: Location attestations signed with EIP-712 (like MetaMask message signing)</p> <p>Perfect for:</p> <ul> <li>High-volume applications (thousands of attestations)</li> <li>Private location tracking</li> <li>Real-time features</li> <li>When you want to avoid gas costs</li> </ul> <p>How it works:</p> <pre><code>Build Attestation \u2192 Sign with Wallet \u2192 Optionally Publish\n</code></pre> <p>Key characteristics: \u2022 Free - No blockchain transactions or gas costs \u2022 Instant - Created immediately without waiting \u2022 Private - Only you have it until you choose to publish \u2022 Verifiable - Cryptographically signed and provable</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#onchain-workflow","title":"\u2192 Onchain Workflow","text":"<p>What it is: Location attestations registered as blockchain transactions</p> <p>Perfect for:</p> <ul> <li>Smart contract integration</li> <li>Public verification</li> <li>Permanent records</li> <li>DeFi applications</li> </ul> <p>How it works:</p> <pre><code>Build Attestation \u2192 Submit Transaction \u2192 Permanent Blockchain Record\n</code></pre> <p>Key characteristics: \u2022 Permanent - Stored on blockchain forever \u2022 Public - Anyone can verify and query \u2022 Smart contract ready - Directly accessible by contracts \u2022 Immutable - Cannot be altered once created</p> <p>\u203b Privacy Notice: Onchain transactions publish location data to a public blockchain. Ensure users understand and consent before signing.</p> <p>:::info Important These workflows create different attestation types with unique identifiers. An offchain attestation cannot be \"converted\" to onchain while preserving its identity. :::</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#location-formats","title":"Location Formats","text":"<p>Astral SDK uses a modular extension system to handle different spatial data formats:</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#currently-supported-geojson","title":"Currently Supported: GeoJSON","text":"<p>The SDK currently supports the full GeoJSON specification (RFC 7946):</p> <pre><code>// Point - single coordinate\n{ type: 'Point', coordinates: [-0.1276, 51.5074] }\n\n// Feature with metadata\n{\n  type: 'Feature',\n  properties: { name: 'London Eye' },\n  geometry: { type: 'Point', coordinates: [-0.1276, 51.5074] }\n}\n\n// Polygon - area boundaries\n{\n  type: 'Polygon',\n  coordinates: [[[lng1, lat1], [lng2, lat2], [lng3, lat3], [lng1, lat1]]]\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/core-concepts/#coming-soon","title":"Coming Soon","text":"<p>Additional format support is planned:</p> <ul> <li>Coordinate arrays: <code>[longitude, latitude]</code> pairs</li> <li>Well-Known Text (WKT): <code>POINT(-0.1276 51.5074)</code>, <code>POLYGON(...)</code></li> <li>H3 geospatial indexing: Hexagonal cell identifiers</li> </ul> <p>Note: These formats have placeholder implementations in the codebase but are not yet functional. See Extension System for details.</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#location-proof-extensions","title":"Location Proof Extensions","text":"<p>Location attestations can include location proofs - supporting evidence that helps others assess whether a spatial claim should be trusted. This is implemented through a plugin-based extension system.</p> <p>Types of location proofs:</p> <ul> <li>Cryptographic evidence: Zero-knowledge proofs, commitment schemes</li> <li>Sensor data: GPS readings, accelerometer data, environmental sensors</li> <li>Digital artifacts: Photos with EXIF data, timestamped recordings</li> <li>Network evidence: WiFi/Bluetooth proximity, cellular tower data</li> <li>External validation: Third-party services, oracle data</li> </ul> <pre><code>// Example: Attestation with location proof extensions (coming soon)\n{\n  location: { type: 'Point', coordinates: [-0.1276, 51.5074] },\n  memo: \"GPS reading at London Eye\",\n  proofs: [\n    {\n      type: \"gps-sensor-data\",\n      data: \"encrypted_sensor_reading_xyz\",\n      confidence: 0.95\n    }\n  ]\n}\n</code></pre> <p>Note: Location Proof Extensions are currently in development. The extension system exists but specific proof types are not yet implemented.</p> <p>Enable attachment of supporting evidence to validate spatial claims (coming soon).</p> <p>Learn more in the Extension System Guide.</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#extension-system","title":"Extension System","text":"<p>Astral SDK uses a modular extension architecture:</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#location-format-extensions","title":"Location Format Extensions","text":"<p>Handle different spatial data formats (GeoJSON implemented, others coming soon).</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#media-type-extensions","title":"Media Type Extensions","text":"<p>Support various file types for media attachments (images, video, audio, documents).</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#verification-trust","title":"Verification &amp; Trust","text":"<p>\u203b Important: Current verification checks cryptographic signatures and data integrity only. Location Proof extensions (coming soon) will add evidence of truthfulness such as GPS sensor proofs.</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#offchain-verification","title":"Offchain Verification","text":"<p>Offchain attestations are verified by checking the EIP-712 signature:</p> <pre><code>const result = await sdk.verifyOffchainLocationAttestation(attestation);\nif (result.isValid) {\n  console.log(\"Signed by:\", result.signerAddress);\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/core-concepts/#onchain-verification","title":"Onchain Verification","text":"<p>Onchain attestations are verified by querying the blockchain:</p> <pre><code>const result = await sdk.verifyOnchainLocationAttestation(attestation);\nif (result.isValid &amp;&amp; !result.revoked) {\n  console.log(\"Valid blockchain record\");\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/core-concepts/#ethereum-attestation-service-eas","title":"Ethereum Attestation Service (EAS)","text":"<p>Astral SDK is an SDK for working with the reference implementation of the Location Protocol, built on top of EAS (Ethereum Attestation Service). The Location Protocol itself is implementation-agnostic - any system that follows the specification can produce compatible records.</p> <p>Why EAS for the reference implementation:</p> <ul> <li>Standardized format - Established attestation framework</li> <li>Multi-chain support - Works across different blockchains</li> <li>Ecosystem compatibility - Integrates with other EAS-based applications</li> <li>Battle-tested infrastructure - Proven signature schemes and storage patterns</li> </ul> <p>Implementation flexibility: While we use EAS, others can implement the Location Protocol using different signature schemes, storage layers, or verification workflows, as long as they follow the same structural rules.</p>"},{"location":"ecosystem/astral-sdk/core-concepts/#media-attachments","title":"Media Attachments","text":"<p>Location attestations can include media files as supporting evidence:</p> <pre><code>const attestation = await sdk.createOffchainLocationAttestation({\n  location: [-0.1276, 51.5074],\n  memo: \"Photo evidence from London Eye\",\n  media: [\n    {\n      mediaType: \"image/jpeg\",\n      data: base64ImageData,\n    },\n  ],\n});\n</code></pre> <p>Supported media types:</p> <ul> <li>Images: JPEG, PNG, GIF, TIFF</li> <li>Video: MP4, MOV</li> <li>Audio: MP3, WAV, OGG, AAC</li> <li>Documents: PDF</li> </ul>"},{"location":"ecosystem/astral-sdk/core-concepts/#chains-networks","title":"Chains &amp; Networks","text":"<p>Astral SDK supports multiple blockchain networks:</p> Network Type Chain ID Use Case Sepolia Testnet 11155111 Development &amp; testing Base L2 Mainnet 8453 Low-cost production Arbitrum L2 Mainnet 42161 Fast, cheap transactions Celo L1 Mainnet 42220 Mobile-first applications"},{"location":"ecosystem/astral-sdk/core-concepts/#common-patterns","title":"Common Patterns","text":""},{"location":"ecosystem/astral-sdk/core-concepts/#development-workflow","title":"Development Workflow","text":"<pre><code>// 1. Start with offchain for development\nconst offchainAttestation = await sdk.createOffchainLocationAttestation(data);\n\n// 2. Test verification\nconst isValid = await sdk.verifyOffchainLocationAttestation(\n  offchainAttestation\n);\n\n// 3. Move to onchain for production\nconst onchainAttestation = await sdk.createOnchainLocationAttestation(data);\n</code></pre>"},{"location":"ecosystem/astral-sdk/core-concepts/#hybrid-approach","title":"Hybrid Approach","text":"<pre><code>// Create offchain for immediate use\nconst offchainAttestation = await sdk.createOffchainLocationAttestation(data);\n\n// Later, create onchain version for permanent record\nconst onchainAttestation = await sdk.createOnchainLocationAttestation(data);\n// Note: These will have different UIDs but same content\n</code></pre>"},{"location":"ecosystem/astral-sdk/core-concepts/#security-considerations","title":"Security Considerations","text":""},{"location":"ecosystem/astral-sdk/core-concepts/#private-keys","title":"Private Keys","text":"<ul> <li>Never hardcode private keys in your application</li> <li>Use environment variables for server-side applications</li> <li>Use wallet connections for client-side applications</li> </ul>"},{"location":"ecosystem/astral-sdk/core-concepts/#location-privacy","title":"Location Privacy","text":"<ul> <li>Hash sensitive data in memo fields if needed</li> <li>Consider precision - exact coordinates vs approximate areas</li> <li>Offchain first for private location tracking</li> </ul>"},{"location":"ecosystem/astral-sdk/core-concepts/#verification","title":"Verification","text":"<ul> <li>Always verify attestations from external sources</li> <li>Check expiration and revocation status for onchain attestations</li> <li>Validate location data format before processing</li> </ul>"},{"location":"ecosystem/astral-sdk/core-concepts/#next-steps","title":"Next Steps","text":"<p>Now that you understand the core concepts:</p> <p>Need more context?</p> <ul> <li>Web3 Concepts - Blockchain, signatures, and verification for geospatial developers</li> <li>Geospatial Concepts - Spatial data and coordinate systems for Web3 developers</li> </ul> <p>Ready to build?</p> <ol> <li>Quick Start - 30-second working example</li> <li>Getting Started Guide - Complete tutorial with setup</li> <li>Extensions Guide - Extension system overview</li> </ol> <p>Reference materials:</p> <ul> <li>Location Protocol Specification - Full protocol details</li> <li>API Reference - Complete method documentation</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/development/","title":"Developer Experience Guide","text":"<p>Essential information for developing with and contributing to the Astral SDK.</p>"},{"location":"ecosystem/astral-sdk/guides/development/#development-setup","title":"Development Setup","text":""},{"location":"ecosystem/astral-sdk/guides/development/#prerequisites","title":"Prerequisites","text":"<p>\u2022 Node.js 18+ and pnpm \u2022 A Web3 wallet (MetaMask or similar) \u2022 Access to a blockchain RPC endpoint</p>"},{"location":"ecosystem/astral-sdk/guides/development/#environment-configuration","title":"Environment Configuration","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># Required for onchain operations\nETHEREUM_RPC_URL=https://sepolia.infura.io/v3/YOUR_KEY\nPRIVATE_KEY=your_test_wallet_private_key\n\n# Required for API operations\nASTRAL_API_URL=https://api.astral.global\n\n# Optional\nDEBUG=astral:*\n</code></pre> <p>\u203b Security Note: Never commit <code>.env</code> files or expose private keys in code.</p>"},{"location":"ecosystem/astral-sdk/guides/development/#module-workflow","title":"Module Workflow","text":""},{"location":"ecosystem/astral-sdk/guides/development/#creating-a-new-extension","title":"Creating a New Extension","text":"<ol> <li>Create the extension file:</li> </ol> <pre><code>// src/extensions/location/builtins/MyFormat.ts\nimport { LocationFormatExtension } from \"../../types\";\n\nexport class MyFormatExtension implements LocationFormatExtension {\n  name = \"my-format\";\n\n  validate(location: unknown): boolean {\n    // Validation logic\n  }\n\n  encode(location: unknown): string {\n    // Encoding logic\n  }\n\n  decode(encoded: string): unknown {\n    // Decoding logic\n  }\n}\n</code></pre> <ol> <li>Register the extension:</li> </ol> <pre><code>// src/extensions/location/index.ts\nimport { MyFormatExtension } from \"./builtins/MyFormat\";\n\nexport const locationExtensions = [\n  // ... existing extensions\n  new MyFormatExtension(),\n];\n</code></pre> <ol> <li>Add tests:</li> </ol> <pre><code>// test/extensions/location/MyFormat.test.ts\nimport { MyFormatExtension } from \"@/extensions/location/builtins/MyFormat\";\n\ndescribe(\"MyFormatExtension\", () =&gt; {\n  const extension = new MyFormatExtension();\n\n  it(\"validates correct format\", () =&gt; {\n    expect(extension.validate(validData)).toBe(true);\n  });\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#javascript-vs-typescript","title":"JavaScript vs TypeScript","text":""},{"location":"ecosystem/astral-sdk/guides/development/#why-the-sdk-publishes-javascript","title":"Why the SDK Publishes JavaScript","text":"<p>The published NPM package contains: \u2022 Transpiled JavaScript (ES2020) for broad compatibility \u2022 TypeScript declaration files (<code>.d.ts</code>) for type safety \u2022 Source maps for debugging</p>"},{"location":"ecosystem/astral-sdk/guides/development/#development-is-typescript","title":"Development is TypeScript","text":"<p>All source code is written in TypeScript: \u2022 Full type safety during development \u2022 Better IDE support and autocomplete \u2022 Compile-time error checking</p>"},{"location":"ecosystem/astral-sdk/guides/development/#build-process","title":"Build Process","text":"<pre><code># TypeScript source \u2192 JavaScript output\npnpm run build\n\n# Output structure:\ndist/\n\u251c\u2500\u2500 index.js        # Transpiled JavaScript\n\u251c\u2500\u2500 index.d.ts      # Type declarations\n\u2514\u2500\u2500 index.js.map    # Source maps\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#testing-patterns","title":"Testing Patterns","text":""},{"location":"ecosystem/astral-sdk/guides/development/#unit-test-setup","title":"Unit Test Setup","text":"<pre><code>import { vi } from \"vitest\";\nimport { AstralSDK } from \"@/core/AstralSDK\";\n\n// Mock provider\nconst mockProvider = {\n  request: vi.fn(),\n  getSigner: vi.fn(),\n};\n\n// Test instance\nconst sdk = new AstralSDK({\n  provider: mockProvider,\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#integration-test-pattern","title":"Integration Test Pattern","text":"<pre><code>describe(\"Offchain Workflow\", () =&gt; {\n  let sdk: AstralSDK;\n\n  beforeEach(async () =&gt; {\n    // Use test wallet\n    const provider = new ethers.JsonRpcProvider(process.env.TEST_RPC);\n    const signer = new ethers.Wallet(process.env.TEST_PRIVATE_KEY, provider);\n\n    sdk = new AstralSDK({ signer });\n  });\n\n  it(\"creates and verifies attestation\", async () =&gt; {\n    const attestation = await sdk.createOffchainLocationAttestation({\n      location: { type: \"Point\", coordinates: [0, 0] },\n    });\n\n    const result = await sdk.verifyOffchainLocationAttestation(attestation);\n    expect(result.isValid).toBe(true);\n  });\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#mocking-best-practices","title":"Mocking Best Practices","text":"<pre><code>// Mock ethers provider\nvi.mock(\"ethers\", () =&gt; ({\n  ethers: {\n    JsonRpcProvider: vi.fn(() =&gt; mockProvider),\n    Wallet: vi.fn(() =&gt; mockSigner),\n  },\n}));\n\n// Mock network requests\nvi.mock(\"@/api/AstralApiClient\", () =&gt; ({\n  AstralApiClient: vi.fn(() =&gt; ({\n    publishAttestation: vi.fn().mockResolvedValue({ uid: \"0x123\" }),\n  })),\n}));\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"ecosystem/astral-sdk/guides/development/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npnpm test\n\n# Specific test file\npnpm test MyFormat.test.ts\n\n# Watch mode\npnpm test -- --watch\n\n# Coverage\npnpm test -- --coverage\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#debugging","title":"Debugging","text":"<p>Enable debug logging:</p> <pre><code>const sdk = new AstralSDK({\n  provider,\n  debug: true, // Enables console logging\n});\n</code></pre> <p>Or via environment:</p> <pre><code>DEBUG=astral:* pnpm test\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#type-checking","title":"Type Checking","text":"<pre><code># Check types\npnpm run typecheck\n\n# Watch mode\npnpm run typecheck -- --watch\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#project-structure-best-practices","title":"Project Structure Best Practices","text":""},{"location":"ecosystem/astral-sdk/guides/development/#file-organization","title":"File Organization","text":"<pre><code>src/\n\u251c\u2500\u2500 core/           # Core SDK logic\n\u251c\u2500\u2500 eas/            # EAS-specific code\n\u251c\u2500\u2500 extensions/     # Extension system\n\u251c\u2500\u2500 api/            # External API clients\n\u251c\u2500\u2500 storage/        # Storage adapters\n\u2514\u2500\u2500 utils/          # Shared utilities\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#import-conventions","title":"Import Conventions","text":"<pre><code>// 1. Node built-ins\nimport { readFile } from \"fs/promises\";\n\n// 2. External packages\nimport { ethers } from \"ethers\";\nimport { EAS } from \"@ethereum-attestation-service/eas-sdk\";\n\n// 3. Internal absolute imports\nimport { AstralSDK } from \"@/core/AstralSDK\";\nimport { LocationFormatExtension } from \"@/extensions/types\";\n\n// 4. Relative imports\nimport { validateLocation } from \"./validation\";\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#naming-conventions","title":"Naming Conventions","text":"<p>\u2022 Files: <code>PascalCase.ts</code> for classes, <code>camelCase.ts</code> for utilities \u2022 Extensions: Suffix with <code>Extension</code> (e.g., <code>GeoJSONExtension</code>) \u2022 Tests: Mirror source structure with <code>.test.ts</code> suffix \u2022 Types: Export from dedicated <code>types.ts</code> files</p>"},{"location":"ecosystem/astral-sdk/guides/development/#performance-considerations","title":"Performance Considerations","text":""},{"location":"ecosystem/astral-sdk/guides/development/#batch-operations","title":"Batch Operations","text":"<pre><code>// Good: Batch attestations\nconst attestations = await Promise.all(\n  locations.map((location) =&gt;\n    sdk.createOffchainLocationAttestation({ location })\n  )\n);\n\n// Avoid: Sequential operations\nfor (const location of locations) {\n  await sdk.createOffchainLocationAttestation({ location });\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#caching-patterns","title":"Caching Patterns","text":"<pre><code>// Cache provider instances\nconst providerCache = new Map&lt;string, ethers.Provider&gt;();\n\nfunction getProvider(rpcUrl: string) {\n  if (!providerCache.has(rpcUrl)) {\n    providerCache.set(rpcUrl, new ethers.JsonRpcProvider(rpcUrl));\n  }\n  return providerCache.get(rpcUrl)!;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ecosystem/astral-sdk/guides/development/#common-issues","title":"Common Issues","text":"<p>TypeScript errors after install</p> <pre><code># Regenerate types\npnpm run build\n</code></pre> <p>Test failures with providers</p> <pre><code># Ensure test environment\ncp .env.example .env.test\n# Add your test RPC and private key\n</code></pre> <p>Module resolution errors</p> <pre><code># Clear cache and reinstall\nrm -rf node_modules pnpm-lock.yaml\npnpm install\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#debug-commands","title":"Debug Commands","text":"<pre><code># Verbose logging\nDEBUG=* pnpm test\n\n# Check build output\npnpm run build &amp;&amp; ls -la dist/\n\n# Verify types\npnpm run typecheck -- --listFiles\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"ecosystem/astral-sdk/guides/development/#before-submitting-pr","title":"Before Submitting PR","text":"<ol> <li>Run all checks:</li> </ol> <pre><code>pnpm run lint\npnpm run typecheck\npnpm test\n</code></pre> <ol> <li> <p>Update documentation if adding features</p> </li> <li> <p>Follow commit conventions:</p> </li> </ol> <pre><code>feat: add new location format\nfix: correct validation logic\ndocs: update API examples\ntest: add integration tests\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/development/#code-review-checklist","title":"Code Review Checklist","text":"<p>\u25a1 Tests pass and cover new code \u25a1 Types are properly defined \u25a1 Documentation is updated \u25a1 No hardcoded values \u25a1 Follows project conventions</p>"},{"location":"ecosystem/astral-sdk/guides/development/#next-steps","title":"Next Steps","text":"<p>\u2022 API Reference - Complete method documentation \u2022 Extension System - Build custom extensions \u2022 Examples - Real-world usage patterns</p>"},{"location":"ecosystem/astral-sdk/guides/getting-started/","title":"Getting Started with Astral SDK","text":"<p>This guide will take you from zero to creating your first location attestation in about 5 minutes.</p>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to install and set up the Astral SDK</li> <li>The difference between offchain and onchain workflows</li> <li>How to create your first location attestation</li> <li>How to verify attestations</li> <li>Common patterns and best practices</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18+ and a package manager (pnpm, npm, or yarn)</li> <li>Basic familiarity with TypeScript/JavaScript</li> <li>For onchain examples: A wallet with testnet ETH</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#installation","title":"Installation","text":"<pre><code># Using pnpm (recommended)\npnpm add @decentralized-geo/astral-sdk\n\n# Using npm\nnpm install @decentralized-geo/astral-sdk\n\n# Using yarn\nyarn add @decentralized-geo/astral-sdk\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#core-concepts","title":"Core Concepts","text":""},{"location":"ecosystem/astral-sdk/guides/getting-started/#two-workflows-two-use-cases","title":"Two Workflows, Two Use Cases","text":"<p>Astral SDK offers two distinct ways to create location attestations:</p> <p>\u2192 Offchain Workflow \u2022 Uses EIP-712 signatures (like MetaMask message signing) \u2022 No gas costs, instant creation \u2022 Perfect for: apps with many users, private attestations, real-time features</p> <p>\u2192 Onchain Workflow \u2022 Creates permanent blockchain transactions</p> <ul> <li>Costs gas, takes time to confirm</li> <li>Perfect for: smart contracts, public records, immutable proofs</li> </ul> <p>Important: These create different attestation types with unique identifiers. You cannot convert between them while preserving identity.</p>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#your-first-offchain-attestation-gasless","title":"Your First Offchain Attestation (Gasless)","text":"<p>Let's start with the simpler offchain workflow that doesn't require any ETH.</p>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-1-basic-setup","title":"Step 1: Basic Setup","text":"<pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\n\n// Create SDK instance - no wallet required for basic operations\nconst sdk = new AstralSDK({\n  mode: \"offchain\", // Focus on offchain features\n  debug: true, // See what's happening under the hood\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-2-create-a-simple-location-attestation","title":"Step 2: Create a Simple Location Attestation","text":"<pre><code>// Define your location (multiple formats supported)\nconst locationData = {\n  location: [-0.1276, 51.5074], // London coordinates [longitude, latitude]\n  memo: \"Visited London Eye today!\",\n  timestamp: new Date(),\n};\n\n// Build the attestation structure\nconst unsignedAttestation = await sdk.buildLocationAttestation(locationData);\n\nconsole.log(\"\u2705 Unsigned attestation created\");\nconsole.log(\"Location type detected:\", unsignedAttestation.locationType);\nconsole.log(\n  \"Event timestamp:\",\n  new Date(unsignedAttestation.eventTimestamp * 1000)\n);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-3-add-a-signature-requires-wallet","title":"Step 3: Add a Signature (Requires Wallet)","text":"<p>Now we need a wallet to sign the attestation:</p> <pre><code>import { ethers } from \"ethers\";\n\n// Connect to user's wallet (in browser)\nconst provider = new ethers.BrowserProvider(window.ethereum);\nconst signer = await provider.getSigner();\n\n// Create SDK with signer\nconst signingSDK = new AstralSDK({\n  signer,\n  defaultChain: \"sepolia\", // Use Sepolia testnet\n  debug: true,\n});\n\n// Create and sign in one step\nconst offchainAttestation = await signingSDK.createOffchainLocationAttestation({\n  location: [-0.1276, 51.5074],\n  memo: \"My first signed location attestation!\",\n});\n\nconsole.log(\"\ud83c\udf89 Signed attestation created!\");\nconsole.log(\"UID:\", offchainAttestation.uid);\nconsole.log(\"Signer:\", offchainAttestation.signer);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-4-verify-the-attestation","title":"Step 4: Verify the Attestation","text":"<pre><code>// Verify the signature\nconst verification = await signingSDK.verifyOffchainLocationAttestation(\n  offchainAttestation\n);\n\nif (verification.isValid) {\n  console.log(\"\u2705 Signature is valid!\");\n  console.log(\"Signed by:\", verification.signerAddress);\n} else {\n  console.log(\"\u274c Invalid signature:\", verification.reason);\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#your-first-onchain-attestation","title":"Your First Onchain Attestation","text":"<p>Onchain attestations are permanently stored on the blockchain and can be queried by smart contracts.</p>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>A wallet with Sepolia testnet ETH</li> <li>Get free testnet ETH from: https://sepoliafaucet.com/</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-1-setup-with-provider","title":"Step 1: Setup with Provider","text":"<pre><code>import { ethers } from \"ethers\";\n\n// Setup provider and signer for blockchain interaction\nconst provider = new ethers.JsonRpcProvider(\n  \"https://sepolia.infura.io/v3/YOUR_INFURA_KEY\"\n);\nconst privateKey = \"YOUR_TEST_PRIVATE_KEY\"; // Use a test wallet!\nconst signer = new ethers.Wallet(privateKey, provider);\n\nconst sdk = new AstralSDK({\n  provider,\n  signer,\n  defaultChain: \"sepolia\",\n  debug: true,\n});\n\n// Check balance before proceeding\nconst balance = await provider.getBalance(signer.address);\nconsole.log(\"Balance:\", ethers.formatEther(balance), \"sepETH\");\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-2-create-onchain-attestation","title":"Step 2: Create Onchain Attestation","text":"<pre><code>// This will submit a real blockchain transaction\nconst onchainAttestation = await sdk.createOnchainLocationAttestation({\n  location: {\n    type: \"Point\",\n    coordinates: [2.3522, 48.8566], // Paris coordinates\n  },\n  memo: \"Permanent record from the Eiffel Tower\",\n});\n\nconsole.log(\"\ud83c\udf89 Onchain attestation created!\");\nconsole.log(\"UID:\", onchainAttestation.uid);\nconsole.log(\"Transaction hash:\", onchainAttestation.txHash);\nconsole.log(\"Block number:\", onchainAttestation.blockNumber);\nconsole.log(\n  \"View on Etherscan:\",\n  `https://sepolia.etherscan.io/tx/${onchainAttestation.txHash}`\n);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#step-3-verify-onchain","title":"Step 3: Verify Onchain","text":"<pre><code>const verification = await sdk.verifyOnchainLocationAttestation(\n  onchainAttestation\n);\n\nconsole.log(\"Verification result:\", {\n  isValid: verification.isValid,\n  attester: verification.signerAddress,\n  revoked: verification.revoked,\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#location-format-examples","title":"Location Format Examples","text":"<p>Astral SDK currently supports GeoJSON format with additional formats coming soon:</p> <pre><code>// Currently supported: GeoJSON format\nconst geoJsonFormats = [\n  // Point in Lagos, Nigeria\n  {\n    type: \"Point\",\n    coordinates: [3.3792, 6.5244],\n  },\n\n  // Feature with metadata in Jakarta\n  {\n    type: \"Feature\",\n    properties: {\n      name: \"National Monument\",\n      type: \"landmark\",\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [106.8272, -6.1751],\n    },\n  },\n\n  // Polygon boundary around Sydney harbor area\n  {\n    type: \"Polygon\",\n    coordinates: [\n      [\n        [\n          [151.2, -33.85],\n          [151.25, -33.85],\n          [151.25, -33.88],\n          [151.2, -33.88],\n          [151.2, -33.85],\n        ],\n      ],\n    ],\n  },\n];\n\n// Use GeoJSON format\nfor (const location of geoJsonFormats) {\n  const attestation = await sdk.buildLocationAttestation({\n    location,\n    memo: `Spatial record: ${location.type || location.geometry?.type} feature`,\n  });\n\n  console.log(\"Location type:\", attestation.locationType);\n}\n</code></pre> <p>:::info Coming Soon Additional location formats are planned:</p> <ul> <li>Coordinate arrays: <code>[longitude, latitude]</code> pairs</li> <li>Well-Known Text (WKT): <code>POINT(-74.0060 40.7128)</code>, <code>POLYGON(...)</code></li> <li>H3 geospatial indexing: Hexagonal cell identifiers</li> </ul> <p>These have placeholder implementations in the codebase but are not yet functional. :::</p>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#adding-media-attachments","title":"Adding Media Attachments","text":"<p>You can attach images, videos, or other files to location attestations:</p> <pre><code>// Base64 encoded image data (1x1 pixel PNG for demo)\nconst imageData =\n  \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==\";\n\nconst attestationWithMedia = await sdk.createOffchainLocationAttestation({\n  location: [-0.1276, 51.5074],\n  memo: \"Photo evidence from London\",\n  media: [\n    {\n      mediaType: \"image/png\",\n      data: imageData,\n    },\n  ],\n});\n\nconsole.log(\"Media types:\", attestationWithMedia.mediaType);\nconsole.log(\"Media data entries:\", attestationWithMedia.mediaData.length);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>import {\n  AstralError,\n  ValidationError,\n  NetworkError,\n} from \"@astral-protocol/sdk\";\n\ntry {\n  const attestation = await sdk.createOffchainLocationAttestation({\n    location: null, // This will cause a validation error\n    memo: \"Invalid location\",\n  });\n} catch (error) {\n  if (error instanceof ValidationError) {\n    console.log(\"\u274c Invalid input:\", error.message);\n  } else if (error instanceof NetworkError) {\n    console.log(\"\ud83c\udf10 Network problem:\", error.message);\n  } else if (error instanceof AstralError) {\n    console.log(\"\u26a0\ufe0f SDK error:\", error.message);\n  } else {\n    console.log(\"\ud83d\udca5 Unexpected error:\", error);\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#working-with-environment-variables","title":"Working with Environment Variables","text":"<p>Create a <code>.env.local</code> file for your configuration:</p> <pre><code># Required for onchain operations\nTEST_PRIVATE_KEY=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\nINFURA_API_KEY=your_infura_project_id\n\n# Optional configuration\nASTRAL_API_URL=https://api.astral-protocol.com\nSEPOLIA_RPC_URL=https://sepolia.infura.io/v3/your_project_id\n</code></pre> <p>Then load them in your application:</p> <pre><code>import * as dotenv from \"dotenv\";\ndotenv.config({ path: \".env.local\" });\n\nconst sdk = new AstralSDK({\n  provider: new ethers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL),\n  signer: new ethers.Wallet(process.env.TEST_PRIVATE_KEY!),\n  defaultChain: \"sepolia\",\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#type-safety-tips","title":"Type Safety Tips","text":"<p>Astral SDK is fully typed. Use TypeScript features to catch errors early:</p> <pre><code>import {\n  LocationAttestationInput,\n  OffchainLocationAttestation,\n  OnchainLocationAttestation,\n  isOffchainLocationAttestation,\n} from \"@decentralized-geo/astral-sdk\";\n\n// Input type ensures you provide required fields\nconst input: LocationAttestationInput = {\n  location: { type: \"Point\", coordinates: [100.5018, 13.7563] }, // Bangkok\n  memo: \"Type-safe spatial record\",\n  timestamp: new Date(), // Optional but typed\n};\n\n// Type guards help handle mixed attestation types\nfunction handleAttestation(\n  attestation: OffchainLocationAttestation | OnchainLocationAttestation\n) {\n  if (isOffchainLocationAttestation(attestation)) {\n    // TypeScript knows this is offchain\n    console.log(\"Signer:\", attestation.signer);\n    console.log(\"Signature:\", attestation.signature);\n  } else {\n    // TypeScript knows this is onchain\n    console.log(\"Transaction:\", attestation.txHash);\n    console.log(\"Block:\", attestation.blockNumber);\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first location attestations, explore these advanced topics:</p> <ul> <li>Offchain Workflow Guide - Deep dive into gasless attestations</li> <li>Onchain Workflow Guide - Blockchain integration patterns</li> <li>API Reference - Complete method documentation</li> <li>Examples Cookbook - Real-world usage patterns</li> <li>Extension System - Custom location formats and media types</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"ecosystem/astral-sdk/guides/getting-started/#no-extension-found-for-location-type","title":"\"No extension found for location type\"","text":"<pre><code>// Wait for extensions to load before using the SDK\nawait sdk.extensions.ensureInitialized();\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#insufficient-funds-for-gas","title":"\"Insufficient funds for gas\"","text":"<ul> <li>Get testnet ETH from https://sepoliafaucet.com/</li> <li>Check balance: <code>await provider.getBalance(address)</code></li> </ul>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#invalid-signature-in-verification","title":"\"Invalid signature\" in verification","text":"<ul> <li>Ensure the signer address matches the attestation signer</li> <li>Check that the attestation wasn't modified after signing</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#type-errors-with-location-data","title":"Type errors with location data","text":"<pre><code>// Be explicit about GeoJSON coordinate order: [longitude, latitude]\nconst point = {\n  type: \"Point\",\n  coordinates: [31.2357, 30.0444], // Cairo: lng, lat\n};\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/getting-started/#support","title":"Support","text":"<ul> <li>Documentation: Complete guides in the <code>docs/</code> folder</li> <li>Examples: Working code in the <code>examples/</code> folder</li> <li>Issues: Report problems on GitHub</li> <li>Community: Join our Discord for questions</li> </ul> <p>Ready to build something amazing with location attestations? Check out the Examples Cookbook for real-world patterns!</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/","title":"Offchain Workflow Guide","text":"<p>Offchain attestations use EIP-712 signatures to create cryptographically verifiable location proofs without blockchain transactions. They're perfect for high-volume applications, private attestations, and real-time features.</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#overview","title":"Overview","text":"<p>What it is: Location attestations signed with your wallet's private key using the EIP-712 standard Gas cost: Free (no blockchain transactions) Speed: Instant creation and verification Privacy: Completely private until you choose to publish Use cases: Social apps, gaming, analytics, high-frequency location tracking</p> <p>\u203b Data Persistence: Offchain attestations exist only where you store them. If you delete the file or database record, they disappear. Consider backing up important attestations.</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#core-workflow","title":"Core Workflow","text":"<pre><code>1. Build Attestation \u2192 2. Sign with EIP-712 \u2192 3. Optionally Publish\n</code></pre> <p>Each step is separate, giving you control over when and how attestations are created and shared.</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#quick-start","title":"Quick Start","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#basic-offchain-attestation","title":"Basic Offchain Attestation","text":"<pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\nimport { ethers } from \"ethers\";\n\n// Setup with wallet connection\nconst provider = new ethers.BrowserProvider(window.ethereum);\nconst signer = await provider.getSigner();\n\nconst sdk = new AstralSDK({\n  signer,\n  defaultChain: \"sepolia\",\n});\n\n// Create attestation (builds + signs in one step)\nconst attestation = await sdk.createOffchainLocationAttestation({\n  location: { type: \"Point\", coordinates: [-0.1276, 51.5074] }, // London coordinates\n  memo: \"Geocache location verification\",\n});\n\nconsole.log(\"Attestation created:\", attestation.uid);\nconsole.log(\"Signed by:\", attestation.signer);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#step-1-build-unsigned-attestation","title":"Step 1: Build Unsigned Attestation","text":"<pre><code>// Create the attestation structure without signing\nconst unsignedAttestation = await sdk.buildLocationAttestation({\n  location: {\n    type: \"Point\",\n    coordinates: [55.2708, 25.2048], // Dubai\n  },\n  memo: \"Infrastructure monitoring point\",\n  timestamp: new Date(),\n\n  // Optional: attach media\n  media: [\n    {\n      mediaType: \"image/jpeg\",\n      data: base64ImageData,\n    },\n  ],\n});\n\nconsole.log(\"Unsigned attestation built:\");\nconsole.log(\"- Location type:\", unsignedAttestation.locationType);\nconsole.log(\n  \"- Event timestamp:\",\n  new Date(unsignedAttestation.eventTimestamp * 1000)\n);\nconsole.log(\"- Schema fields:\", {\n  mediaType: unsignedAttestation.mediaType,\n  proofType: unsignedAttestation.proofType,\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#step-2-sign-the-attestation","title":"Step 2: Sign the Attestation","text":"<pre><code>// Sign the unsigned attestation with EIP-712\nconst signedAttestation = await sdk.signOffchainLocationAttestation(\n  unsignedAttestation\n);\n\nconsole.log(\"Signed attestation:\");\nconsole.log(\"- UID:\", signedAttestation.uid);\nconsole.log(\"- Signer:\", signedAttestation.signer);\nconsole.log(\"- Version:\", signedAttestation.version);\nconsole.log(\"- Signature:\", signedAttestation.signature);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#step-3-verify-the-signature","title":"Step 3: Verify the Signature","text":"<pre><code>// Verify the attestation signature\nconst verification = await sdk.verifyOffchainLocationAttestation(\n  signedAttestation\n);\n\nif (verification.isValid) {\n  console.log(\"\u2705 Valid signature\");\n  console.log(\"Verified signer:\", verification.signerAddress);\n} else {\n  console.log(\"\u274c Invalid signature\");\n  console.log(\"Reason:\", verification.reason);\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#eip-712-signature-details","title":"EIP-712 Signature Details","text":"<p>Offchain attestations use the EIP-712 standard for structured data signing. This is the same standard used by popular protocols like Uniswap and OpenSea.</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#typed-data-structure","title":"Typed Data Structure","text":"<pre><code>// The EIP-712 typed data structure used internally\nconst typedData = {\n  types: {\n    Attest: [\n      { name: \"version\", type: \"uint16\" },\n      { name: \"schema\", type: \"bytes32\" },\n      { name: \"recipient\", type: \"address\" },\n      { name: \"time\", type: \"uint64\" },\n      { name: \"expirationTime\", type: \"uint64\" },\n      { name: \"revocable\", type: \"bool\" },\n      { name: \"refUID\", type: \"bytes32\" },\n      { name: \"data\", type: \"bytes\" },\n    ],\n  },\n  domain: {\n    name: \"EAS Attestation\",\n    version: \"1.3.0\",\n    chainId: 11155111, // Sepolia\n    verifyingContract: \"0x...\", // EAS contract address\n  },\n  message: {\n    // Attestation data\n  },\n};\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#signature-format","title":"Signature Format","text":"<pre><code>// Signatures are stored as JSON with r, s, v components\nconst signatureObject = {\n  r: \"0x...\",\n  s: \"0x...\",\n  v: 28,\n};\n\n// This gets serialized to the signature field\nattestation.signature = JSON.stringify(signatureObject);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#batch-creation","title":"Batch Creation","text":"<pre><code>// Create multiple attestations efficiently\nconst locations = [\n  {\n    coords: { type: \"Point\", coordinates: [-0.1276, 51.5074] },\n    name: \"London\",\n  },\n  {\n    coords: { type: \"Point\", coordinates: [139.6917, 35.6895] },\n    name: \"Tokyo\",\n  },\n  {\n    coords: { type: \"Point\", coordinates: [-105.0178, 39.7392] },\n    name: \"Denver\",\n  },\n];\n\nconst attestations = await Promise.all(\n  locations.map((loc) =&gt;\n    sdk.createOffchainLocationAttestation({\n      location: loc.coords,\n      memo: `Spatial record at ${loc.name}`,\n    })\n  )\n);\n\nconsole.log(`Created ${attestations.length} attestations`);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#custom-metadata","title":"Custom Metadata","text":"<pre><code>// Add custom data to attestations\nconst customAttestation = await sdk.createOffchainLocationAttestation({\n  location: { type: \"Point\", coordinates: [77.209, 28.6139] }, // New Delhi\n  memo: JSON.stringify({\n    sensor_type: \"air_quality\",\n    pm25: 45.2,\n    temperature: 28.5,\n    station_id: \"DEL_AQ_001\",\n  }),\n  timestamp: new Date(),\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#media-attachments","title":"Media Attachments","text":"<pre><code>// Multiple media types supported\nconst mediaAttestation = await sdk.createOffchainLocationAttestation({\n  location: { type: \"Point\", coordinates: [12.4964, 41.9028] }, // Rome\n  memo: \"Archaeological site documentation\",\n  media: [\n    {\n      mediaType: \"image/jpeg\",\n      data: photoBase64,\n    },\n    {\n      mediaType: \"audio/mp3\",\n      data: audioRecordingBase64,\n    },\n    {\n      mediaType: \"application/pdf\",\n      data: ticketPdfBase64,\n    },\n  ],\n});\n\nconsole.log(\"Media types attached:\", mediaAttestation.mediaType);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#verification-patterns","title":"Verification Patterns","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#basic-verification","title":"Basic Verification","text":"<pre><code>const result = await sdk.verifyOffchainLocationAttestation(attestation);\n\n// Result structure\ninterface VerificationResult {\n  isValid: boolean;\n  signerAddress?: string;\n  reason?: string;\n  attestation?: OffchainLocationAttestation;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#batch-verification","title":"Batch Verification","text":"<pre><code>// Verify multiple attestations\nasync function verifyBatch(attestations: OffchainLocationAttestation[]) {\n  const results = await Promise.all(\n    attestations.map((attestation) =&gt;\n      sdk.verifyOffchainLocationAttestation(attestation)\n    )\n  );\n\n  const valid = results.filter((r) =&gt; r.isValid);\n  const invalid = results.filter((r) =&gt; !r.isValid);\n\n  console.log(`${valid.length} valid, ${invalid.length} invalid`);\n\n  return { valid, invalid };\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#signer-verification","title":"Signer Verification","text":"<pre><code>// Verify attestation came from specific address\nfunction verifyFromAddress(\n  attestation: OffchainLocationAttestation,\n  expectedSigner: string\n): boolean {\n  return attestation.signer.toLowerCase() === expectedSigner.toLowerCase();\n}\n\n// More robust verification with signature check\nasync function verifyFromAddressWithSignature(\n  attestation: OffchainLocationAttestation,\n  expectedSigner: string\n): Promise&lt;boolean&gt; {\n  const verification = await sdk.verifyOffchainLocationAttestation(attestation);\n\n  return (\n    verification.isValid &amp;&amp;\n    verification.signerAddress?.toLowerCase() === expectedSigner.toLowerCase()\n  );\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#publishing-attestations","title":"Publishing Attestations","text":"<p>Offchain attestations are private by default. Publishing capabilities are coming soon.</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#future-publishing-options","title":"Future: Publishing Options","text":"<pre><code>// Coming soon: Publish to make attestations discoverable\n// const publishedAttestation = await sdk.publishOffchainLocationAttestation(attestation);\n</code></pre> <p>Planned publishing targets:</p> <ul> <li>Astral's discovery API</li> <li>IPFS distributed storage</li> <li>Custom storage adapters</li> </ul> <p>Note: Publishing methods exist in the codebase as placeholders but are not yet functional. The <code>publishOffchainLocationAttestation</code> method currently returns the attestation unchanged.</p>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#error-handling","title":"Error Handling","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#common-errors","title":"Common Errors","text":"<pre><code>import {\n  SignerError,\n  ValidationError,\n  VerificationError,\n} from \"@decentralized-geo/astral-sdk\";\n\ntry {\n  const attestation = await sdk.createOffchainLocationAttestation({\n    location: invalidLocation,\n    memo: \"This will fail\",\n  });\n} catch (error) {\n  if (error instanceof SignerError) {\n    console.log(\"\u274c Wallet signing failed:\", error.message);\n    // User rejected signature, wallet not connected, etc.\n  } else if (error instanceof ValidationError) {\n    console.log(\"\u274c Invalid input data:\", error.message);\n    // Bad location format, missing required fields, etc.\n  } else if (error instanceof VerificationError) {\n    console.log(\"\u274c Signature verification failed:\", error.message);\n    // Invalid signature, wrong chain, etc.\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#retry-patterns","title":"Retry Patterns","text":"<pre><code>// Retry failed signatures (user might have rejected initially)\nasync function createWithRetry(\n  input: LocationAttestationInput,\n  maxRetries = 3\n) {\n  for (let i = 0; i &lt; maxRetries; i++) {\n    try {\n      return await sdk.createOffchainLocationAttestation(input);\n    } catch (error) {\n      if (error instanceof SignerError &amp;&amp; i &lt; maxRetries - 1) {\n        console.log(`Signature failed, retry ${i + 1}/${maxRetries}`);\n        continue;\n      }\n      throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#extension-preloading","title":"Extension Preloading","text":"<pre><code>// Ensure extensions are loaded before high-frequency operations\nawait sdk.extensions.ensureInitialized();\n\n// Now create attestations without loading delays\nconst attestations = await Promise.all(\n  locations.map((loc) =&gt; sdk.createOffchainLocationAttestation(loc))\n);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#signature-caching","title":"Signature Caching","text":"<pre><code>// Cache signer for repeated operations\nclass SignerCache {\n  private cachedSigner?: ethers.Signer;\n\n  async getSigner(): Promise&lt;ethers.Signer&gt; {\n    if (!this.cachedSigner) {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      this.cachedSigner = await provider.getSigner();\n    }\n    return this.cachedSigner;\n  }\n}\n\nconst signerCache = new SignerCache();\nconst sdk = new AstralSDK({\n  signer: await signerCache.getSigner(),\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#security-considerations","title":"Security Considerations","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#private-key-management","title":"Private Key Management","text":"<pre><code>// \u274c Never hardcode private keys\nconst badSDK = new AstralSDK({\n  signer: new ethers.Wallet(\"0x1234567890abcdef...\"),\n});\n\n// \u2705 Use environment variables for server-side\nconst serverSDK = new AstralSDK({\n  signer: new ethers.Wallet(process.env.PRIVATE_KEY!),\n});\n\n// \u2705 Use wallet connection for client-side\nconst clientSDK = new AstralSDK({\n  signer: await provider.getSigner(),\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#signature-validation","title":"Signature Validation","text":"<pre><code>// Always verify signatures when accepting attestations from others\nasync function acceptAttestation(attestation: OffchainLocationAttestation) {\n  const verification = await sdk.verifyOffchainLocationAttestation(attestation);\n\n  if (!verification.isValid) {\n    throw new Error(`Invalid attestation: ${verification.reason}`);\n  }\n\n  // Additional business logic validation\n  if (!isExpectedSigner(verification.signerAddress)) {\n    throw new Error(\"Attestation from unexpected signer\");\n  }\n\n  return verification.attestation;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#data-privacy","title":"Data Privacy","text":"<pre><code>// Sensitive data should be hashed or encrypted in memo field\nimport { createHash } from \"crypto\";\n\nconst sensitiveData = \"user-private-info\";\nconst hashedMemo = createHash(\"sha256\").update(sensitiveData).digest(\"hex\");\n\nconst attestation = await sdk.createOffchainLocationAttestation({\n  location: coords,\n  memo: hashedMemo, // Store hash instead of raw data\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#integration-examples","title":"Integration Examples","text":""},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#react-hook","title":"React Hook","text":"<pre><code>import { useState, useCallback } from \"react\";\nimport { AstralSDK, LocationAttestationInput } from \"@astral-protocol/sdk\";\n\nexport function useOffchainAttestation() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState&lt;string | null&gt;(null);\n\n  const createAttestation = useCallback(\n    async (sdk: AstralSDK, input: LocationAttestationInput) =&gt; {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const attestation = await sdk.createOffchainLocationAttestation(input);\n        return attestation;\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"Unknown error\");\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  return { createAttestation, loading, error };\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#expressjs-api","title":"Express.js API","text":"<pre><code>import express from \"express\";\nimport { AstralSDK } from \"@astral-protocol/sdk\";\n\nconst app = express();\nconst sdk = new AstralSDK({\n  signer: new ethers.Wallet(process.env.PRIVATE_KEY!),\n});\n\napp.post(\"/api/attestations\", async (req, res) =&gt; {\n  try {\n    const { location, memo } = req.body;\n\n    const attestation = await sdk.createOffchainLocationAttestation({\n      location,\n      memo,\n      timestamp: new Date(),\n    });\n\n    res.json({\n      success: true,\n      uid: attestation.uid,\n      signer: attestation.signer,\n    });\n  } catch (error) {\n    res.status(400).json({\n      success: false,\n      error: error.message,\n    });\n  }\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#best-practices","title":"Best Practices","text":"<ol> <li>Always verify signatures when accepting attestations from external sources</li> <li>Preload extensions before high-frequency operations</li> <li>Cache signers to avoid repeated wallet connections</li> <li>Use environment variables for private keys in server environments</li> <li>Hash sensitive data in memo fields rather than storing plaintext</li> <li>Implement retry logic for user-rejected signatures</li> <li>Validate location data before creating attestations</li> <li>Consider batch operations for multiple attestations</li> </ol>"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#comparison-with-onchain","title":"Comparison with Onchain","text":"Feature Offchain Onchain Cost Free Gas fees required Speed Instant Blockchain confirmation time Privacy Private by default Public by default Smart Contract Integration Limited Native Permanence Depends on storage Immutable Discoverability Opt-in publishing Always discoverable Use Cases High-volume, analytics, privacy DeFi, public records, smart contracts"},{"location":"ecosystem/astral-sdk/guides/offchain-workflow/#next-steps","title":"Next Steps","text":"<ul> <li>Onchain Workflow Guide - Learn about permanent blockchain attestations</li> <li>API Reference - Complete method documentation</li> <li>Extension System - Custom location formats and media types</li> </ul>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/","title":"Onchain Workflow Guide","text":"<p>Onchain attestations are permanently stored on the blockchain as EAS (Ethereum Attestation Service) records. They're perfect for smart contract integration, public verification, and immutable location proofs.</p>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#overview","title":"Overview","text":"<p>What it is: Location attestations registered as blockchain transactions using EAS contracts Gas cost: Network-dependent (usually $0.01-0.10 on L2s, more on mainnet) Speed: Block confirmation time (seconds to minutes) Privacy: Public by default (anyone can query) Use cases: DeFi protocols, public records, smart contract integration, immutable proofs</p> <p>\u203b Privacy Warning: These transactions publish location data to a public blockchain. Make sure users understand and consent before signing.</p>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#core-workflow","title":"Core Workflow","text":"<pre><code>1. Build Attestation \u2192 2. Submit Transaction \u2192 3. Permanent Blockchain Record\n</code></pre> <p>Unlike offchain attestations, onchain attestations are registered in a single step that creates a permanent blockchain record.</p>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#quick-start","title":"Quick Start","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#basic-onchain-attestation","title":"Basic Onchain Attestation","text":"<pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\nimport { ethers } from \"ethers\";\n\n// Setup with provider and funded wallet\nconst provider = new ethers.JsonRpcProvider(\n  \"https://sepolia.infura.io/v3/YOUR_KEY\"\n);\nconst signer = new ethers.Wallet(\"YOUR_PRIVATE_KEY\", provider);\n\nconst sdk = new AstralSDK({\n  provider,\n  signer,\n  defaultChain: \"sepolia\",\n});\n\n// Create onchain attestation (builds + registers in one transaction)\nconst attestation = await sdk.createOnchainLocationAttestation({\n  location: { type: \"Point\", coordinates: [-0.1276, 51.5074] }, // London coordinates\n  memo: \"Permanent monitoring station record\",\n});\n\nconsole.log(\"\u2705 Onchain attestation created!\");\nconsole.log(\"UID:\", attestation.uid);\nconsole.log(\"Transaction:\", attestation.txHash);\nconsole.log(\"Block:\", attestation.blockNumber);\nconsole.log(\n  \"View on Etherscan:\",\n  `https://sepolia.etherscan.io/tx/${attestation.txHash}`\n);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#prerequisites","title":"Prerequisites","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#network-setup","title":"Network Setup","text":"<pre><code>// Supported networks and their configurations\nconst networks = {\n  sepolia: {\n    chainId: 11155111,\n    rpcUrl: \"https://sepolia.infura.io/v3/YOUR_KEY\",\n    easContract: \"0xC2679fBD37d54388Ce493F1DB75320D236e1815e\",\n    faucet: \"https://sepoliafaucet.com/\",\n  },\n  base: {\n    chainId: 8453,\n    rpcUrl: \"https://mainnet.base.org\",\n    easContract: \"0x4200000000000000000000000000000000000021\",\n  },\n  arbitrum: {\n    chainId: 42161,\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n    easContract: \"0xbD75f629A22Dc1ceD33dDA0b68c546A1c035c458\",\n  },\n  celo: {\n    chainId: 42220,\n    rpcUrl: \"https://forno.celo.org\",\n    easContract: \"0x72E1d8ccf5299fb36fEfD8CC4394B8ef7e98Af92\",\n  },\n};\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#wallet-funding","title":"Wallet Funding","text":"<pre><code>// Check wallet balance before operations\nasync function checkWalletReady(provider: ethers.Provider, address: string) {\n  const balance = await provider.getBalance(address);\n  const balanceEth = ethers.formatEther(balance);\n\n  console.log(`Wallet ${address}`);\n  console.log(`Balance: ${balanceEth} ETH`);\n\n  if (balance === 0n) {\n    throw new Error(\"Wallet has no funds for gas fees\");\n  }\n\n  return { balance: balanceEth, ready: true };\n}\n\nawait checkWalletReady(provider, signer.address);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#step-by-step-process","title":"Step-by-Step Process","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#step-1-build-unsigned-attestation","title":"Step 1: Build Unsigned Attestation","text":"<pre><code>// Create the attestation structure (same as offchain)\nconst unsignedAttestation = await sdk.buildLocationAttestation({\n  location: {\n    type: \"Feature\",\n    properties: { name: \"Machu Picchu\", type: \"archaeological_site\" },\n    geometry: {\n      type: \"Point\",\n      coordinates: [-72.545, -13.1631],\n    },\n  },\n  memo: \"UNESCO heritage site boundary marker\",\n  timestamp: new Date(),\n});\n\nconsole.log(\"Unsigned attestation built:\");\nconsole.log(\"- Location type:\", unsignedAttestation.locationType);\nconsole.log(\"- Schema UID:\", unsignedAttestation.schema);\nconsole.log(\"- Data payload size:\", unsignedAttestation.data?.length || 0);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#step-2-register-on-blockchain","title":"Step 2: Register on Blockchain","text":"<pre><code>// Register the attestation as a blockchain transaction\nconst onchainAttestation = await sdk.registerOnchainLocationAttestation(\n  unsignedAttestation\n);\n\nconsole.log(\"Registration successful:\");\nconsole.log(\"- UID:\", onchainAttestation.uid);\nconsole.log(\"- Transaction hash:\", onchainAttestation.txHash);\nconsole.log(\"- Block number:\", onchainAttestation.blockNumber);\nconsole.log(\"- Gas used:\", onchainAttestation.gasUsed);\nconsole.log(\"- Attester:\", onchainAttestation.attester);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#step-3-verify-registration","title":"Step 3: Verify Registration","text":"<pre><code>// Verify the attestation exists on-chain\nconst verification = await sdk.verifyOnchainLocationAttestation(\n  onchainAttestation\n);\n\nconsole.log(\"Verification result:\");\nconsole.log(\"- Valid:\", verification.isValid);\nconsole.log(\"- Attester:\", verification.signerAddress);\nconsole.log(\"- Revoked:\", verification.revoked);\nconsole.log(\"- Expiration:\", verification.expirationTime);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#gas-estimation","title":"Gas Estimation","text":"<pre><code>// Estimate gas before transaction\nasync function estimateAttestationGas(\n  sdk: AstralSDK,\n  input: LocationAttestationInput\n): Promise&lt;bigint&gt; {\n  const unsignedAttestation = await sdk.buildLocationAttestation(input);\n\n  // Get gas estimate from registrar\n  const gasEstimate = await sdk.onchain.estimateGas(unsignedAttestation);\n\n  console.log(\"Estimated gas:\", gasEstimate.toString());\n\n  return gasEstimate;\n}\n\n// Use estimate to set gas limit\nconst gasEstimate = await estimateAttestationGas(sdk, attestationInput);\nconst onchainAttestation = await sdk.createOnchainLocationAttestation(\n  attestationInput,\n  {\n    gasLimit: (gasEstimate * 110n) / 100n, // Add 10% buffer\n  }\n);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#custom-transaction-options","title":"Custom Transaction Options","text":"<pre><code>// Advanced transaction configuration\nconst attestation = await sdk.createOnchainLocationAttestation(\n  {\n    location: coordinates,\n    memo: \"High priority attestation\",\n  },\n  {\n    gasLimit: 200000n,\n    gasPrice: ethers.parseUnits(\"20\", \"gwei\"), // Fast confirmation\n    value: 0n, // No ETH value transfer\n    nonce: await provider.getTransactionCount(signer.address),\n  }\n);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#batch-attestations","title":"Batch Attestations","text":"<pre><code>// Create multiple attestations in separate transactions\nasync function createBatchAttestations(\n  sdk: AstralSDK,\n  inputs: LocationAttestationInput[]\n): Promise&lt;OnchainLocationAttestation[]&gt; {\n  const results = [];\n\n  for (const input of inputs) {\n    try {\n      const attestation = await sdk.createOnchainLocationAttestation(input);\n      results.push(attestation);\n\n      console.log(`\u2705 Created attestation ${attestation.uid}`);\n\n      // Optional: wait between transactions to avoid nonce issues\n      await new Promise((resolve) =&gt; setTimeout(resolve, 1000));\n    } catch (error) {\n      console.error(`\u274c Failed to create attestation:`, error);\n      // Continue with next attestation\n    }\n  }\n\n  return results;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#revocable-attestations","title":"Revocable Attestations","text":"<pre><code>// Create a revocable attestation\nconst revocableAttestation = await sdk.createOnchainLocationAttestation({\n  location: { type: \"Point\", coordinates: [151.2093, -33.8688] }, // Sydney\n  memo: \"Temporary construction zone boundary\",\n  revocable: true, // Enable revocation\n});\n\n// Later, revoke the attestation\nconst revocationTx = await sdk.revokeOnchainLocationAttestation(\n  revocableAttestation,\n  \"Reason for revocation\"\n);\n\nconsole.log(\"Revocation transaction:\", revocationTx.txHash);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#eas-integration-details","title":"EAS Integration Details","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#schema-information","title":"Schema Information","text":"<pre><code>// Location attestation schema structure\nconst LOCATION_SCHEMA = {\n  uid: \"0x...\",\n  definition: [\n    \"uint64 eventTimestamp\",\n    \"string srs\",\n    \"string locationType\",\n    \"string location\",\n    \"string[] proofType\",\n    \"string[] proofPayload\",\n    \"string[] mediaType\",\n    \"string[] mediaData\",\n    \"string memo\",\n  ].join(\",\"),\n  resolver: \"0x0000000000000000000000000000000000000000\", // No custom resolver\n  revocable: true,\n};\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#contract-interaction","title":"Contract Interaction","text":"<pre><code>// Direct EAS contract interaction (advanced usage)\nimport { EAS } from \"@ethereum-attestation-service/eas-sdk\";\n\nconst eas = new EAS(\"0xC2679fBD37d54388Ce493F1DB75320D236e1815e\");\neas.connect(signer);\n\n// The SDK handles this internally, but you can access it directly\nconst attestationRequest = {\n  schema: LOCATION_SCHEMA.uid,\n  data: {\n    recipient: \"0x0000000000000000000000000000000000000000\",\n    expirationTime: 0n,\n    revocable: true,\n    refUID:\n      \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    data: encodedAttestationData,\n  },\n};\n\nconst tx = await eas.attest(attestationRequest);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#error-handling","title":"Error Handling","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#transaction-failures","title":"Transaction Failures","text":"<pre><code>import {\n  InsufficientFundsError,\n  TransactionError,\n  NetworkError,\n  ContractError,\n} from \"@decentralized-geo/astral-sdk\";\n\ntry {\n  const attestation = await sdk.createOnchainLocationAttestation(input);\n} catch (error) {\n  if (error instanceof InsufficientFundsError) {\n    console.log(\"\u274c Insufficient funds for gas\");\n    console.log(\"\ud83d\udca1 Get testnet ETH from faucet\");\n  } else if (error instanceof TransactionError) {\n    console.log(\"\u274c Transaction failed:\", error.message);\n    console.log(\"Transaction hash:\", error.txHash);\n  } else if (error instanceof NetworkError) {\n    console.log(\"\ud83c\udf10 Network issue:\", error.message);\n    console.log(\"\ud83d\udca1 Check RPC endpoint and connectivity\");\n  } else if (error instanceof ContractError) {\n    console.log(\"\ud83d\udcdc Smart contract error:\", error.message);\n    console.log(\"\ud83d\udca1 Check EAS contract status\");\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#gas-price-management","title":"Gas Price Management","text":"<pre><code>// Handle gas price fluctuations\nasync function createAttestationWithRetry(\n  sdk: AstralSDK,\n  input: LocationAttestationInput,\n  maxRetries = 3\n) {\n  for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n    try {\n      // Get current gas price\n      const feeData = await sdk.provider.getFeeData();\n      const gasPrice = feeData.gasPrice;\n\n      if (!gasPrice) {\n        throw new Error(\"Unable to determine gas price\");\n      }\n\n      console.log(\n        `Attempt ${attempt}: Gas price ${ethers.formatUnits(\n          gasPrice,\n          \"gwei\"\n        )} gwei`\n      );\n\n      const attestation = await sdk.createOnchainLocationAttestation(input, {\n        gasPrice: (gasPrice * 120n) / 100n, // 20% buffer\n      });\n\n      return attestation;\n    } catch (error) {\n      if (attempt === maxRetries) throw error;\n\n      console.log(`Attempt ${attempt} failed, retrying...`);\n      await new Promise((resolve) =&gt; setTimeout(resolve, 2000 * attempt));\n    }\n  }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#smart-contract-integration","title":"Smart Contract Integration","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#reading-attestations-in-solidity","title":"Reading Attestations in Solidity","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\n\ncontract LocationVerifier {\n    IEAS private immutable _eas;\n    bytes32 private immutable _locationSchema;\n\n    constructor(address easContract, bytes32 locationSchema) {\n        _eas = IEAS(easContract);\n        _locationSchema = locationSchema;\n    }\n\n    function verifyLocation(bytes32 uid) external view returns (bool) {\n        Attestation memory attestation = _eas.getAttestation(uid);\n\n        // Verify the attestation exists and uses our schema\n        return attestation.uid != bytes32(0) &amp;&amp;\n               attestation.schema == _locationSchema &amp;&amp;\n               !attestation.revoked &amp;&amp;\n               (attestation.expirationTime == 0 || attestation.expirationTime &gt; block.timestamp);\n    }\n\n    function getLocationData(bytes32 uid) external view returns (string memory) {\n        Attestation memory attestation = _eas.getAttestation(uid);\n        require(attestation.schema == _locationSchema, \"Invalid schema\");\n\n        // Decode the location data from attestation.data\n        // (Implementation depends on your specific encoding)\n        return abi.decode(attestation.data, (string));\n    }\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#frontend-integration","title":"Frontend Integration","text":"<pre><code>// React component for onchain attestations\nimport { useState } from \"react\";\nimport { AstralSDK, OnchainLocationAttestation } from \"@astral-protocol/sdk\";\n\nfunction OnchainAttestationForm() {\n  const [attestation, setAttestation] =\n    useState&lt;OnchainLocationAttestation | null&gt;(null);\n  const [txHash, setTxHash] = useState&lt;string&gt;(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const createAttestation = async (\n    location: [number, number],\n    memo: string\n  ) =&gt; {\n    setLoading(true);\n    try {\n      const result = await sdk.createOnchainLocationAttestation({\n        location,\n        memo,\n      });\n\n      setAttestation(result);\n      setTxHash(result.txHash);\n\n      // Show success notification\n      console.log(\"\u2705 Attestation created:\", result.uid);\n    } catch (error) {\n      console.error(\"\u274c Creation failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      {/* Form UI */}\n      {attestation &amp;&amp; (\n        &lt;div&gt;\n          &lt;h3&gt;Attestation Created!&lt;/h3&gt;\n          &lt;p&gt;UID: {attestation.uid}&lt;/p&gt;\n          &lt;p&gt;Block: {attestation.blockNumber}&lt;/p&gt;\n          &lt;a\n            href={`https://sepolia.etherscan.io/tx/${txHash}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          &gt;\n            View on Etherscan\n          &lt;/a&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#querying-attestations","title":"Querying Attestations","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#by-attester","title":"By Attester","text":"<pre><code>// Find all attestations created by a specific address\nconst attestations = await sdk.queryLocationAttestations({\n  attester: \"0x742d35Cc6641C3bB8c9E8A93cf85c1E7f1A8c1E7\",\n  schema: LOCATION_SCHEMA_UID,\n  limit: 50,\n});\n\nconsole.log(`Found ${attestations.total} attestations`);\nattestations.attestations.forEach((attestation) =&gt; {\n  console.log(`- ${attestation.uid}: ${attestation.decodedDataJson.memo}`);\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#by-recipient","title":"By Recipient","text":"<pre><code>// Find attestations made about a specific address\nconst attestations = await sdk.queryLocationAttestations({\n  recipient: \"0x...\",\n  revoked: false, // Only non-revoked\n  orderBy: \"time\",\n  orderDirection: \"desc\",\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#graphql-queries","title":"GraphQL Queries","text":"<pre><code>// Advanced querying using EAS's GraphQL endpoint\nconst query = `\n  query LocationAttestations($schema: String!, $attester: String!) {\n    attestations(\n      where: {\n        schema: $schema,\n        attester: $attester,\n        revoked: false\n      }\n      orderBy: time\n      orderDirection: desc\n    ) {\n      id\n      uid\n      attester\n      recipient\n      time\n      data\n      txid\n    }\n  }\n`;\n\nconst result = await fetch(\"https://sepolia.easscan.org/graphql\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    query,\n    variables: {\n      schema: LOCATION_SCHEMA_UID,\n      attester: \"0x...\",\n    },\n  }),\n});\n\nconst { data } = await result.json();\nconsole.log(\"GraphQL results:\", data.attestations);\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#transaction-batching","title":"Transaction Batching","text":"<pre><code>// Use multicall for multiple operations\nimport { Multicall3 } from \"@ethereum-attestation-service/eas-sdk\";\n\nasync function batchOperations(sdk: AstralSDK, operations: any[]) {\n  const multicall = new Multicall3(sdk.provider);\n\n  const calls = operations.map((op) =&gt; ({\n    target: EAS_CONTRACT_ADDRESS,\n    callData: op.data,\n  }));\n\n  const results = await multicall.aggregate(calls);\n  return results;\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#gas-optimization","title":"Gas Optimization","text":"<pre><code>// Optimize attestation data for lower gas costs\nfunction optimizeAttestation(input: LocationAttestationInput) {\n  return {\n    ...input,\n    // Use shorter memo texts\n    memo: input.memo.substring(0, 100),\n\n    // Compress location data when possible\n    location: compressCoordinates(input.location),\n\n    // Minimize media attachments\n    media: input.media?.slice(0, 3), // Max 3 attachments\n  };\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#security-considerations","title":"Security Considerations","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#input-validation","title":"Input Validation","text":"<pre><code>// Validate inputs before expensive onchain operations\nfunction validateAttestationInput(input: LocationAttestationInput) {\n  if (!input.location) {\n    throw new Error(\"Location is required\");\n  }\n\n  if (input.memo &amp;&amp; input.memo.length &gt; 500) {\n    throw new Error(\"Memo too long (max 500 characters)\");\n  }\n\n  if (input.media &amp;&amp; input.media.length &gt; 5) {\n    throw new Error(\"Too many media attachments (max 5)\");\n  }\n\n  // Additional validation...\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#access-control","title":"Access Control","text":"<pre><code>// Restrict who can create attestations\nasync function createRestrictedAttestation(\n  sdk: AstralSDK,\n  input: LocationAttestationInput,\n  allowedSigners: string[]\n) {\n  const signerAddress = await sdk.signer?.getAddress();\n\n  if (!signerAddress || !allowedSigners.includes(signerAddress.toLowerCase())) {\n    throw new Error(\"Unauthorized signer\");\n  }\n\n  return sdk.createOnchainLocationAttestation(input);\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#cost-analysis","title":"Cost Analysis","text":""},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#gas-costs-by-network-approximate","title":"Gas Costs by Network (Approximate)","text":"Network Base Cost With Media USD Cost (ETH=$2000) Sepolia 150,000 gas 200,000 gas Free (testnet) Base 150,000 gas 200,000 gas $0.10 - $1.00 Arbitrum 150,000 gas 200,000 gas $0.15 - $1.50 Polygon 150,000 gas 200,000 gas $0.01 - $0.10 Ethereum 150,000 gas 200,000 gas $5.00 - $50.00"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#cost-optimization-tips","title":"Cost Optimization Tips","text":"<ol> <li>Use L2 networks (Base, Arbitrum) for lower costs</li> <li>Minimize data size - shorter memos, compressed media</li> <li>Batch operations when possible</li> <li>Set appropriate gas prices - don't overpay</li> <li>Consider offchain for high-volume use cases</li> </ol>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#best-practices","title":"Best Practices","text":"<ol> <li>Always check wallet balance before operations</li> <li>Estimate gas for large or complex attestations</li> <li>Handle transaction failures gracefully with retries</li> <li>Validate inputs before expensive onchain operations</li> <li>Use appropriate gas prices for desired confirmation speed</li> <li>Monitor network congestion and adjust accordingly</li> <li>Store transaction hashes for reference and debugging</li> <li>Verify attestations after creation to confirm success</li> </ol>"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#comparison-with-offchain","title":"Comparison with Offchain","text":"Feature Onchain Offchain Permanence Immutable blockchain record Depends on storage Cost Gas fees required Free Speed Block confirmation time Instant Privacy Public by default Private by default Smart Contract Access Native integration Limited Discoverability Always discoverable Opt-in publishing Revocation Blockchain transaction Update signature/storage"},{"location":"ecosystem/astral-sdk/guides/onchain-workflow/#next-steps","title":"Next Steps","text":"<ul> <li>Offchain Workflow Guide - Learn about gasless attestations</li> <li>API Reference - Complete method documentation</li> <li>Extension System - Custom location formats and media</li> </ul>"},{"location":"ecosystem/astral-sdk/quick-start/","title":"Quick Start","text":"<p>Get your first location attestation working in under 30 seconds.</p>"},{"location":"ecosystem/astral-sdk/quick-start/#choose-your-path","title":"Choose Your Path","text":""},{"location":"ecosystem/astral-sdk/quick-start/#installation","title":"\u2192 Installation","text":"<p>Set up the SDK in your project</p>"},{"location":"ecosystem/astral-sdk/quick-start/#configuration","title":"\u2192 Configuration","text":"<p>Connect your wallet and configure the SDK</p>"},{"location":"ecosystem/astral-sdk/quick-start/#first-attestation","title":"\u2192 First Attestation","text":"<p>Create your first location attestation</p>"},{"location":"ecosystem/astral-sdk/quick-start/#what-youll-build","title":"What You'll Build","text":"<p>In this quick start, you'll:</p> <p>\u2022 Install the Astral SDK \u2022 Connect to a Web3 wallet \u2022 Create a signed location attestation \u2022 Verify the attestation works</p> <p>Total time: &lt; 2 minutes</p>"},{"location":"ecosystem/astral-sdk/quick-start/#prerequisites","title":"Prerequisites","text":"<p>You'll need:</p> <p>\u2022 Node.js 18+ installed \u2022 A package manager (pnpm, npm, or yarn) \u2022 A Web3 wallet (MetaMask or similar)</p> <p>\u203b No blockchain knowledge required for the offchain workflow!</p> <p>\u2192 Next: Installation</p>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/","title":"Configuration","text":"<p>Connect the SDK to your Web3 wallet and choose your network.</p>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>The simplest setup uses your browser wallet:</p> <pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\n\n// Connect to browser wallet (MetaMask, etc.)\nconst sdk = new AstralSDK({\n  provider: window.ethereum,\n  defaultChain: \"sepolia\", // testnet for development\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"ecosystem/astral-sdk/quick-start/configuration/#supported-chains","title":"\u2192 Supported Chains","text":"<pre><code>type SupportedChain =\n  | \"sepolia\" // Ethereum testnet (recommended for development)\n  | \"base\" // Base mainnet\n  | \"arbitrum\" // Arbitrum One\n  | \"celo\"; // Celo mainnet\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/#full-configuration","title":"\u2192 Full Configuration","text":"<pre><code>const sdk = new AstralSDK({\n  // Required\n  provider: window.ethereum, // Web3 provider\n\n  // Optional\n  defaultChain: \"sepolia\", // Default: 'sepolia'\n  apiUrl: \"https://api.astral.com\", // Custom API endpoint\n  debug: true, // Enable debug logging\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/#provider-options","title":"Provider Options","text":""},{"location":"ecosystem/astral-sdk/quick-start/configuration/#browser-wallet-recommended","title":"Browser Wallet (Recommended)","text":"<pre><code>// MetaMask or other injected wallets\nconst sdk = new AstralSDK({\n  provider: window.ethereum,\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/#custom-provider","title":"Custom Provider","text":"<pre><code>import { ethers } from \"ethers\";\n\n// Using ethers.js provider\nconst provider = new ethers.JsonRpcProvider(\"https://rpc.sepolia.org\");\nconst signer = new ethers.Wallet(privateKey, provider);\n\nconst sdk = new AstralSDK({\n  provider: signer,\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/configuration/#verify-configuration","title":"Verify Configuration","text":"<pre><code>// Check connection\nconst address = await sdk.getAddress();\nconsole.log(\"Connected wallet:\", address);\n\n// Check chain\nconst chainId = await sdk.getChainId();\nconsole.log(\"Connected to chain:\", chainId);\n</code></pre> <p>\u2192 Next: First Attestation</p>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/","title":"First Attestation","text":"<p>Create and verify your first location attestation.</p>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#offchain-attestation-no-gas","title":"Offchain Attestation (No Gas)","text":"<p>Start with an offchain attestation - no blockchain fees required:</p> <pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\n\n// Initialize SDK\nconst sdk = new AstralSDK({\n  provider: window.ethereum,\n  defaultChain: \"sepolia\",\n});\n\n// Create attestation\nconst attestation = await sdk.createOffchainLocationAttestation({\n  location: [-0.163808, 51.5101], // [lng, lat]\n  memo: \"Westminster Bridge, London\",\n});\n\nconsole.log(\"Created attestation:\", attestation.uid);\nconsole.log(\"Signed by:\", attestation.signer);\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#verify-the-attestation","title":"Verify the Attestation","text":"<pre><code>// Verify signature\nconst verification = await sdk.verifyOffchainLocationAttestation(attestation);\n\nconsole.log(\"Valid signature:\", verification.isValid);\nconsole.log(\"Signer address:\", verification.signer);\nconsole.log(\"Location data:\", verification.locationData);\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#understanding-the-response","title":"Understanding the Response","text":"<p>An offchain attestation contains:</p> <pre><code>{\n  uid: \"0x...\",           // Unique identifier\n  signer: \"0x...\",        // Wallet that signed\n  signature: \"0x...\",     // EIP-712 signature\n  locationData: {...},    // Your location data\n  timestamp: 1234567890,  // Unix timestamp\n  memo: \"...\"            // Your memo text\n}\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#try-different-locations","title":"Try Different Locations","text":""},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#geojson-point","title":"GeoJSON Point","text":"<pre><code>const pointAttestation = await sdk.createOffchainLocationAttestation({\n  location: {\n    type: \"Point\",\n    coordinates: [139.6503, 35.6762], // Tokyo\n  },\n  memo: \"Tokyo Tower observation\",\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#geojson-feature","title":"GeoJSON Feature","text":"<pre><code>const featureAttestation = await sdk.createOffchainLocationAttestation({\n  location: {\n    type: \"Feature\",\n    properties: {\n      name: \"Eiffel Tower\",\n      height: 330,\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [2.2945, 48.8584], // Paris\n    },\n  },\n  memo: \"Landmark documentation\",\n});\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#whats-next","title":"What's Next?","text":"<p>\u2713 You've created your first location attestation!</p>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#continue-learning","title":"Continue Learning","text":"<ul> <li>Offchain Workflow Guide - Deep dive into offchain attestations</li> <li>Onchain Workflow Guide - Create permanent blockchain records</li> <li>Core Concepts - Understand the fundamentals</li> </ul>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#build-something","title":"Build Something","text":"<ul> <li>Environmental monitoring station</li> <li>Delivery confirmation system</li> <li>Location-based rewards</li> <li>Geospatial data registry</li> </ul>"},{"location":"ecosystem/astral-sdk/quick-start/first-attestation/#get-help","title":"Get Help","text":"<p>\u2022 Review common issues \u2022 Check the API Reference</p>"},{"location":"ecosystem/astral-sdk/quick-start/installation/","title":"Installation","text":"<p>Add the Astral SDK to your project in seconds.</p>"},{"location":"ecosystem/astral-sdk/quick-start/installation/#package-managers","title":"Package Managers","text":"<p>Choose your preferred package manager:</p> <pre><code># Using pnpm (recommended)\npnpm add @decentralized-geo/astral-sdk\n\n# Using npm\nnpm install @decentralized-geo/astral-sdk\n\n# Using yarn\nyarn add @decentralized-geo/astral-sdk\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/installation/#import-the-sdk","title":"Import the SDK","text":"<pre><code>// ES Modules (recommended)\nimport { AstralSDK } from \"@decentralized-geo/astral-sdk\";\n\n// CommonJS\nconst { AstralSDK } = require(\"@decentralized-geo/astral-sdk\");\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/installation/#typescript-support","title":"TypeScript Support","text":"<p>The SDK includes TypeScript definitions out of the box. No additional setup required!</p> <pre><code>import {\n  AstralSDK,\n  UnsignedLocationAttestation,\n  OffchainLocationAttestation,\n  OnchainLocationAttestation,\n} from \"@decentralized-geo/astral-sdk\";\n</code></pre>"},{"location":"ecosystem/astral-sdk/quick-start/installation/#verify-installation","title":"Verify Installation","text":"<p>Quick check to ensure everything is working:</p> <pre><code>import { AstralSDK } from \"@decentralized-geo/astral-sdk\";\n\nconsole.log(\"Astral SDK imported successfully!\");\n</code></pre> <p>\u2192 Next: Configuration</p>"},{"location":"ecosystem/decentralized-location-logger/","title":"\ud83e\udded Decentralized Location Logger","text":"<p>The Decentralized Location Logger is an application built on Astral's Location Proof Protocol.</p> <p>With the Logbook, users can:</p> <ul> <li>record geotagged entries</li> <li>store log entries onchain</li> <li>include a text memo in their entries</li> <li>attach content to an entry</li> <li>record location data with IPFS storage and Filecoin backups via web3.storage</li> <li>explore an interactive map of entries posted around the world (soon!)</li> <li>verify friends' entries (soon!)</li> <li>share to decentralized social media (soon!)</li> </ul> <p>Watch a quick intro to the Logbook here.</p>"},{"location":"ecosystem/decentralized-location-logger/#documentation","title":"Documentation","text":"<ul> <li>Getting Started &amp; Functionality</li> <li>Technology Stack &amp; Architecture</li> <li>Prerequisites</li> <li>Deployment Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/","title":"Deployment Guide","text":"<p>This guide provides detailed instructions for deploying an instance of the decentralized location logger application.</p>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#initial-setup","title":"Initial Setup","text":""},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#1-fork-and-clone-the-repository","title":"1. Fork and Clone the Repository","text":"<ul> <li>Click the \"Fork\" button in the upper right corner to create your own copy</li> <li>Clone your forked repository to your local machine:   <pre><code>git clone https://github.com/YOUR-USERNAME/logbook-filecoin.git\ncd logbook-filecoin\n</code></pre></li> <li>This creates a local copy of the codebase that you can modify and deploy</li> </ul>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#2-build-configure","title":"2. Build &amp; Configure","text":"<ul> <li> <p>Install dependencies: <pre><code>yarn install\n</code></pre>   This installs all required dependencies for the project.</p> </li> <li> <p>In <code>/packages/nextjs/</code>, copy <code>.env.example</code> to <code>.env.local</code>:   <pre><code>cd packages/nextjs\ncp .env.example .env.local\n</code></pre></p> </li> <li> <p>Configure the following required environment variables in your <code>.env.local</code> file:</p> </li> <li><code>NEXT_PUBLIC_MAPBOX_TOKEN</code>: Your Mapbox API token</li> <li><code>NEXT_PUBLIC_WEB3STORAGE_TOKEN</code>: Your Web3.Storage API token</li> <li><code>NEXT_PUBLIC_WEB3STORAGE_PROOF</code>: Your Web3.Storage proof string</li> </ul>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#3-how-to-get-the-required-tokens","title":"3. How to get the required tokens:","text":""},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#mapbox-access-token","title":"Mapbox Access Token:","text":"<ol> <li>Create an account or sign in at Mapbox</li> <li>Navigate to your Account \u2192 Access Tokens</li> <li>Create a new token with the default public scopes</li> <li>Copy the token to your <code>.env.local</code> file</li> </ol>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#web3storage-tokens","title":"Web3.Storage Tokens:","text":"<ol> <li>Create an account or sign in at Web3.Storage</li> <li>Create a space (instructions)</li> <li>Create a signing key (instructions) - this will be your <code>NEXT_PUBLIC_WEB3STORAGE_TOKEN</code></li> <li>Create a proof (instructions) - this will be your <code>NEXT_PUBLIC_WEB3STORAGE_PROOF</code></li> </ol>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#ipfs-setup","title":"IPFS Setup","text":""},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#1-install-and-configure-ipfs","title":"1. Install and Configure IPFS","text":"<ul> <li>Install IPFS Desktop or Command-line:</li> <li>Desktop: Download from IPFS Desktop</li> <li> <p>Command-line: Follow the command-line installation guide</p> </li> <li> <p>Initialize IPFS (if using command-line):   <pre><code>ipfs init\n</code></pre>   This creates a local IPFS repository in <code>~/.ipfs</code> by default.</p> </li> </ul>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#running-the-application","title":"Running the Application","text":""},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#1-start-the-ipfs-daemon","title":"1. Start the IPFS Daemon","text":"<p><pre><code>ipfs daemon\n</code></pre> This runs a local IPFS node that manages the decentralized file storage system, allowing your application to store and retrieve files from the IPFS network.</p>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#2-launch-the-application","title":"2. Launch the Application","text":"<p>In a separate terminal, navigate to the Next.js directory and start the development server: <pre><code>cd packages/nextjs\nyarn dev\n</code></pre> This launches the frontend application on a local development server.</p>"},{"location":"ecosystem/decentralized-location-logger/deployment-guide/#production-deployment","title":"Production Deployment","text":"<p>For production deployment, build the application:</p> <pre><code>cd packages/nextjs\nyarn build\n</code></pre> <p>You can then deploy the built application to platforms like Vercel, Netlify, or any other hosting service that supports Next.js applications.</p>"},{"location":"ecosystem/decentralized-location-logger/getting-started/","title":"Introduction","text":"<p>This is a proof of concept of a decentralized application for recording location data with IPFS storage and Filecoin backups via web3.storage, built on Astral Logbook.</p>"},{"location":"ecosystem/decentralized-location-logger/getting-started/#functionality","title":"Functionality","text":"<p>It allows users to: - record geotagged entries - store log entries onchain - include a text memo in their entries - attach a file to their entries - explore an interactive map of entries posted around the world</p>"},{"location":"ecosystem/decentralized-location-logger/prerequisites/","title":"Prerequisites","text":"<p>Before you begin working with the decentralized location logger application, ensure you have the following tools and software installed:</p> <ul> <li>Node.js (v16 or later) - Required to run the application</li> <li>Yarn package manager - Required for dependency management</li> <li>Git - Required for cloning the repository</li> <li>Web browser with MetaMask or similar Ethereum wallet extension - Required for blockchain interactions</li> </ul>"},{"location":"ecosystem/decentralized-location-logger/prerequisites/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li>Install Node.js</li> <li>Download and install from nodejs.org</li> <li> <p>Verify installation: <code>node --version</code></p> </li> <li> <p>Install Yarn</p> </li> <li>Install with npm: <code>npm install -g yarn</code></li> <li> <p>Verify installation: <code>yarn --version</code></p> </li> <li> <p>Install Git</p> </li> <li>Download and install from git-scm.com</li> <li> <p>Verify installation: <code>git --version</code></p> </li> <li> <p>Set up MetaMask (or similar Ethereum wallet)</p> </li> <li>Install the MetaMask browser extension (or similar Ethereum wallet browser extension)</li> <li>Create a new wallet or import an existing one</li> <li>Connect to the appropriate Ethereum network</li> </ol>"},{"location":"ecosystem/decentralized-location-logger/technology-stack/","title":"Technology Stack","text":""},{"location":"ecosystem/decentralized-location-logger/technology-stack/#core-technologies","title":"Core Technologies","text":"<ul> <li>Frontend: Next.js React framework</li> <li>Mapping: Mapbox for interactive geospatial visualization</li> <li>Blockchain: Ethereum for on-chain storage of location claims</li> <li>Decentralized Storage: IPFS and Filecoin backup via Web3.Storage for file attachments</li> <li>Package Management: Yarn</li> <li>Base Framework: Built on the Astral Logbook architecture</li> </ul>"},{"location":"ecosystem/decentralized-location-logger/technology-stack/#project-structure","title":"Project Structure","text":"<ul> <li><code>/packages/nextjs/</code> - Frontend application code</li> <li><code>/packages/hardhat/</code> - Smart contract code and deployment scripts</li> </ul>"},{"location":"ecosystem/decentralized-location-logger/troubleshooting/","title":"Troubleshooting","text":"<p>This guide covers common issues you might encounter when setting up or running the decentralized location logger application and provides solutions.</p>"},{"location":"ecosystem/decentralized-location-logger/troubleshooting/#ipfs-connection-issues","title":"IPFS Connection Issues","text":"<p>Symptoms: - Files fail to upload - Error messages related to IPFS connection - Browser console shows network errors when trying to connect to IPFS</p> <p>Solutions: - Ensure the IPFS daemon is running in a separate terminal - Try restarting the IPFS daemon:   <pre><code>ipfs shutdown\nipfs daemon\n</code></pre></p>"},{"location":"ecosystem/decentralized-location-logger/troubleshooting/#web3storage-upload-failures","title":"Web3.Storage Upload Failures","text":"<p>Symptoms: - Files upload to IPFS but not to Web3.Storage - Error messages related to Web3.Storage authentication</p> <p>Solutions: - Verify your token and proof are correct in <code>.env.local</code> - Ensure the tokens have not expired - Check file size limits (under 10MB per file) - Verify your Web3.Storage account has sufficient storage space - Check the browser console for specific error messages</p>"},{"location":"ecosystem/decentralized-location-logger/troubleshooting/#wallet-connection-issues","title":"Wallet Connection Issues","text":"<p>Symptoms: - \"Please connect wallet\" message persists - Transactions fail to initiate - Application doesn't recognize connected wallet</p> <p>Solutions: - Ensure your wallet is installed and unlocked - Check that you're connected to the correct network - Try disconnecting and reconnecting your wallet to the application - Clear your browser cache and reload the application</p>"},{"location":"ecosystem/ipfs-stac/","title":"Welcome to ipfs-stac Documentation","text":"<p><code>ipfs-stac</code> is a Python library that provides functionality for querying and interacting with STAC catalogs enriched with IPFS. The library supports seamless operations between leveraging STAC APIs enriched with IPFS metadata and interfacing with IPFS itself given a node.</p> <p>Go to Client Module Documentation</p> <p>How to use <code>ipfs-stac</code></p> <p>Release Notes</p>"},{"location":"ecosystem/ipfs-stac/client/","title":"Client Module","text":"<p>The <code>ipfs_stac.client</code> module provides the main functionality for querying and interacting with STAC catalogs enriched with IPFS. The library supports seamless operations between leveraging STAC APIs enriched with IPFS metadata and interfacing with IPFS itself given a node.</p> <p>To view more information about the <code>ipfs_stac.client</code> module, please refer to the following links:</p> <ul> <li>Asset Class</li> <li>Web3 Class</li> <li>Module Functions</li> </ul> <p>NOTE: The links above will take you directly to the ipfs-stac documentation page, for the respective classes and functions. You can also find the source code for these modules in the ipfs-stac repository.</p>"},{"location":"ecosystem/ipfs-stac/examples/","title":"Using the <code>ipfs-stac</code> library","text":"<p>This pages provides some examples on how to use the <code>ipfs-stac</code> library.</p>"},{"location":"ecosystem/ipfs-stac/examples/#usage","title":"Usage","text":""},{"location":"ecosystem/ipfs-stac/examples/#create-a-client-object","title":"Create a client object","text":"<p>Import the client module and create a new client object. The client object can be used to interact with the STAC API and IPFS.</p> <pre><code>from ipfs_stac import client\neasier = client.Web3()\n</code></pre> <p>You can also specify a specific STAC API endpoint.</p> <pre><code>easier = client.Web3(stac_endpoint=\"https://stac.easierdata.info\")\n</code></pre> <p>If you want to retrieve data from your local IPFS node or a known IPFS HTTP gateway, you can specify the endpoint in the <code>local_gateway</code> argument.</p> <pre><code>easier = client.Web3(local_gateway=\"127.0.0.1\")\n</code></pre> <p>If your local IPFS gateway has been configured beyond the defaults, you can override the default gateway port and KUBO RPC API port.</p> <pre><code>easier = client.Web3(local_gateway=\"127.0.0.1\", gateway_port=8081, api_port=5050)\n</code></pre>"},{"location":"ecosystem/ipfs-stac/examples/#fetch-a-cid-from-ipfs","title":"Fetch a CID from IPFS","text":"<p>Retrieval of content from IPFS is done by providing the CID of the content. The <code>getFromCID</code> method can be used to retrieve the content from IPFS. The example below retrieves the content from the CID <code>QmZ4tDuvesekSs4qM5ZBKpXiZGun7S2CYtEZRB3DYXkjGx</code> and prints it.</p> <pre><code># Simple hello world example\ndata = easier.getFromCID(\"QmZ4tDuvesekSs4qM5ZBKpXiZGun7S2CYtEZRB3DYXkjGx\")\nprint(data)\n\n\"\"\"\nhello worlds\n\"\"\"\n</code></pre>"},{"location":"ecosystem/ipfs-stac/examples/#query-content-from-stac","title":"Query Content from STAC","text":"<p>The <code>searchSTAC</code> method can be used to query a STAC catalog. For a list of query parameters, refer to this table.</p> <p>The example below retrieves all items from the <code>landsat-c2l1</code> collection that are within a bounding box.</p> <pre><code>bounding_box = [-76.964657, 38.978967, -76.928008, 39.002783]\nlandsat_items = easier.searchSTAC(bbox=bounding_box, collections=[\"landsat-c2l1\"]) \nlen(landsat_items) # 2\nlandsat_items\n[&lt;Item id=LC09_L1TP_015033_20221015_20221015_02_T1&gt;, &lt;Item id=LC09_L1GT_015033_20211231_20220122_02_T2&gt;]\n</code></pre> <p>If we wanted to understand the assets our items contain, we can use the <code>getAssetNames</code> method to get a list of assets available in <code>landsat_items</code> object.</p> <pre><code>easier.getAssetNames(landsat_items)\n['ANG.txt', 'MTL.json', 'MTL.txt', 'MTL.xml', 'SAA', 'SZA', 'VAA', 'VZA', 'blue', 'cirrus', 'coastal', 'green', 'index', 'lwir11', 'lwir12', 'nir08', 'pan', 'qa_pixel', 'qa_radsat', 'red', 'reduced_resolution_browse', 'swir16', 'swir22', 'thumbnail']\n</code></pre> <p>Let's retrieve the content of the <code>nir08</code> asset from the first item in the <code>landsat_items</code> object.</p> <pre><code>band = easier.getAssetFromItem(landsat_items[0], 'nir08')\n</code></pre> <p>or even retrieve multiple assets from the item.</p> <pre><code>bands = easier.getAssetsFromItem(item, [\"blue\", \"red\"]) # Returns array of assets\n</code></pre>"},{"location":"ecosystem/ipfs-stac/examples/#the-asset-object","title":"The Asset Object","text":"<p>Up to this point, we've used STAC to identify what collections are available, queried items from a collection and specified which assets we want to retrieve. Next, we'll retrieve the content from IPFS for the assets we've selected.</p> <p>In order to retrieve content from IPFS, we'll need to specify a CID.  Let's get the CID for single band we retrieved earlier.</p> <pre><code>band.cid\n'QmZkWaKSuVhFKtAwNbxSogcT6hXHMksXjhgqLu6AXHSUKq'\n</code></pre> <p>and then fetch the content from IPFS.</p> <pre><code>band.fetch()\nprint(band.data) # b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x...\n\n# Alternatively, you can also transform the asset data in different formats such as a numpy array\nband_np = band.to_np_ndarray()\nprint(band_np) # [[0. 0. 0. ... 0. 0. 0.]\n               #  [0. 0. 0. ... 0. 0. 0.]\n               #  [0. 0. 0. ... 0. 0. 0.]\n               #  ...\n               #  [0. 0. 0. ... 0. 0. 0.]\n               #  [0. 0. 0. ... 0. 0. 0.]\n               #  [0. 0. 0. ... 0. 0. 0.]]\n</code></pre>"},{"location":"ecosystem/ipfs-stac/how-to-install/","title":"Install ipfs-stac","text":"<p><code>ipfs-stac</code> currently requires Python 3.11 or above. To install from the Python Package index (PyPi) run the following command:</p> <pre><code>python pip install ipfs-stac\n</code></pre>"},{"location":"ecosystem/ipfs-stac/how-to-install/#development-installation","title":"Development Installation","text":"<p>We use poetry for dependency management.</p> <p>To install a development version from source:</p> <pre><code>git clone https://github.com/DecentralizedGeo/ipfs-stac.git\ncd ipfs-stac\npython -m venv .venv\npoetry install --with dev\n</code></pre>"},{"location":"ecosystem/ipfs-stac/how-to-install/#documentation-installation","title":"Documentation Installation","text":"<p>We use mkdocs and the material theme extension to build and generate our documentation.</p> <p>To install the documentation dependencies:</p> <pre><code>poetry install --with docs\n</code></pre> <p>To build the documentation and view it locally:</p> <pre><code>mkdocs build\nmkdocs server --clean --open\n</code></pre>"},{"location":"ecosystem/web3-geospatial-dashboard/","title":"Web3 Geospatial Dashboard Introduction","text":""},{"location":"ecosystem/web3-geospatial-dashboard/#web3-geospatial-dashboard","title":"Web3 Geospatial Dashboard","text":"<p>This project renders spatial geometry defined by GeoJSON assets and Web3 enriched STAC APIs. By default, The EASIER Data Initiative has opened up a STAC API with Landsat 9 metadata loaded. The motivation behind this project is to showcase how decentralized technology such as IPFS and Filecoin can cultivate an open ecosystem for data exploration and management. Coupled with other tools that complement this dashboard such as the chrome extension and the ipfs-stac python library, the suite of tools offer effortless integration to Python programs and other applications within the IPFS ecosystem.</p> <p>With the suite of tools that complement the dashboard, users can:</p> <ul> <li>View GeoJSON topology</li> <li>View pinning status of data on IPFS</li> <li>View asset metadata of scenes from a web3 enriched STAC API</li> <li>Hotswap STAC APIs</li> <li>Pin Content to your local IPFS Node</li> <li>Download geospatial content from IPFS</li> <li>Export selected subsets to GeoJSON</li> <li>Export NASA VEDA frontmatter templates</li> </ul>"},{"location":"ecosystem/web3-geospatial-dashboard/#useful-links","title":"Useful Links","text":"Name Description web3-geo-dashboard Repository of the Web3 Geospatial Dashboard Kubo RPC API Documentation for the API opened by IPFS nodes running Kubo IPFS Desktop Installation Installation for IPFS Desktop, to easily spin up an IPFS node Web3 Geo Extension Repository of complementary dashboard chrome extension"},{"location":"ecosystem/web3-geospatial-dashboard/features/","title":"Features","text":""},{"location":"ecosystem/web3-geospatial-dashboard/features/#geojson-visualization","title":"GeoJSON Visualization","text":"<p>When reaching the landing page of the dashboard, users will be presented with a card and two text fields that prompt for a STAC API URL, and optionally, a Geojson endpoint. Upon submission of the form, users will be redirected to a screen that renders the topology with MapboxGL. By default, the application supports searching for points of interest, pinching, zooming, rotating, and clicking on scenes.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/features/#scene-popups","title":"Scene Popups","text":"<p>When clicking on a scene, the event triggers a handler within the chrome extension. This event handler will send a request to the configured IPFS Node and Dashboard API to retrieve IPFS and Filecoin related metadata respectively. The results will then be congregated onto a scene popup. This popup also allows other interactions to be performed such as pinning the data to the configured IPFS node. Clicking on more will reveal a popup that instructs on how to integrate the selected data into a python program leveraging ipfs-stac.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/features/#multi-select","title":"Multi Select","text":"<p>The dashboard supports selecting multiple scenes at once through holding shift and drag clicking across scenes. This would render a sidebar allowing users to integrate the data into their Python programs, pin the data, export to a new GeoJSON, and bring up a template generator to export NASA VEDA frontmatter (shown below):</p> <p></p>"},{"location":"ecosystem/web3-geospatial-dashboard/features/#extension","title":"Extension","text":"<p>The extension itself allows users to interact with the data and directories that exist within the nodes configured mutable file system (MFS). Folders are explorable by clicking on their links, data is filterable and deletable.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/","title":"Getting Started with the Web3 Geospatial Dashboard","text":"<p>This guide will help you get started with the Web3 Geospatial Dashboard, and its complementary components--a suite of tools to explore and interface with geospatial data stored on IPFS and delineated on an IPFS enriched STAC API. This page will not walk through setting up the STAC API, for more details, check out its documentation.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#what-is-the-web3-geospatial-dashboard","title":"What is the Web3 Geospatial Dashboard?","text":"<p>The Web3 Geospatial Dashboard and its components (dashboard API, and chrome extension) lower the barrier for entry for end-users to visualize and interface with data stored on IPFS and referenced on a STAC API. The API exposed a REST interface that acts as a service that bridges filecoin data from block explorers to the dashboard. Lastly, the chrome extension allows basic interactions (ex. button clicks) to invoke requests that hit the Kubo RPC API exposed by IPFS nodes.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#quick-start","title":"Quick Start","text":""},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#pulling-the-repositories","title":"Pulling the repositories","text":"<p>To get pull the Dashboard Repository and Chrome Extension into folders.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#setting-up-development-environment-for-dashboard","title":"Setting up development environment for dashboard","text":"<p>To get a local server running the dashboard,</p> <ol> <li> <p>First create a terminal in the root directory of the Dashboard repository and install the libraries with <code>npm install</code></p> </li> <li> <p>To run the development server, run <code>npm run dev</code></p> </li> </ol>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#node-configuration","title":"Node Configuration","text":"<p>In order to properly fetch metadata from IPFS such as the number of nodes that have a CID pinned as well as other interactions, you must have a properly configured IPFS node. To accept requests from the dashboard, update the <code>Access-Control-Allow-Origin</code> array under <code>HTTPHeaders</code> under <code>API</code>. For local development, add <code>http://127.0.0.1</code>, alternatively, you can accept requests from everywhere with <code>*</code> (this poses a security risk, do it at your own discretion)</p> <p>Check out the IPFS Desktop Setup guide for more details on how to set up a local IPFS node on your machine using IPFS Desktop.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#adding-the-extension","title":"Adding the extension","text":"<p>To add the extension, you must first enable developer mode on Chrome.</p> <ol> <li>Click on Load Unpacked</li> <li>Locate the folder in which the chrome extension was pulled.</li> </ol> <p>Check out the Configure Browser Extension guide for more details on how to set up the extension.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/getting-started/#getting-help","title":"Getting Help","text":"<p>If you have questions or run into issues with the API, please:</p> <ol> <li> <p>Create an issue in the GitHub repository</p> </li> <li> <p>Reach out to the team through our community channels</p> </li> </ol>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-extension/","title":"How to setup chrome extension","text":""},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-extension/#introduction","title":"Introduction","text":"<p>One of the key components for unlocking the full potential of the Web3 geospatial dashboard is the chrome extension. The tool is powerful as it connects basic interactions (such as clicks) to a configured IPFS node. To this point, it mocks some features of the IPFS desktop experience remotely. This means that nodes that are not ran through IPFS desktop but have Kubo exposed can be interfaced with in a similar way. The extension offers the ability to explore the mutable file system, pin data, delete, etc.</p> <p>This page assumes you have already set up a node that exposes a Kubo RPC API. This walk through will explore configuring the extension with a node hosted on a personal device (IPFS Desktop).</p>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-extension/#adding-the-extension-to-chrome","title":"Adding the extension to Chrome","text":"<p>First, clone the web3-geo-extension repository.</p> <p>In a fresh Chrome window, click on the top right 3 dots and hover over Extensions. In the popup, click on Manage Extensions.</p> <p></p> <p>This will bring up the extension settings page. At the top right, toggle on Developer mode</p> <p></p> <p>Following this, click on the Load Unpacked button. This will bring up your system's file manager. Navigate to where you cloned the <code>web3-geo-extension</code> repository and confirm the selection.</p> <p>When you see the \"EASIER Extension\" card on the page loaded, you have successfully loaded the extension to Chrome!</p>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-extension/#configure-node","title":"Configure Node","text":"<p>The extension must be configured to a node in order to begin pinning data and exploring the mutable file system. To configure the extension to talk to a local IPFS Desktop instance, first click on the extension icon at the top right of your Chrome window (you may have to click on the puzzle piece to find it) to bring up the extension popup:</p> <p></p> <p>Click on the settings page and configure the following settings:</p> <ul> <li>IP/Domain: <code>localhost</code></li> <li>Port: <code>5001</code></li> <li>MFS Directory: <code>/root</code> (this can be any name but must start with a <code>/</code>)</li> </ul> <p>Click on save. A popup should render saying the configuration has been saved successfully. This is the last step for setting up the extension.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-extension/#allow-requests-from-extension","title":"Allow Requests from Extension","text":"<p>To accept requests from the extension within a local instance of IPFS Desktop, the configuration of the node must be updated. In the extensions settings page of chrome click on Details for the EASIER extension.</p> <p></p> <p>Copy the ID</p> <p></p> <p>In your IPFS Config, add the extension to the <code>Access-Control-Allow-Origin</code> list. The format for an extension is: <code>chrome-extension://&lt;EXTENSION ID&gt;</code>. In this case, it would be <code>chrome-extension://objbefdcbcbhamidkokglhcpjfghkeik</code>. Reference the IPFS Desktop setup guide for more details.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-ipfs-desktop/","title":"How to setup IPFS Desktop","text":""},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-ipfs-desktop/#introduction","title":"Introduction","text":"<p>If you're new to the IPFS ecosystem, chances are you are confused on how to get started with storing and retrieving data. Moreover, if you're a developer, it's likely you lack a sense of direction on how to get started building tools that interface with IPFS--there are so many APIs such as Web3.storage that exist, picking between so many options is hard! Meet IPFS Desktop. IPFS desktop is an open-source tool built by the IPFS team that bundles a node, file manager, and other tools in an easy-to-use interface. This is a great gateway to kickstart your IPFS journey as a user and/or developer without having to sign up for any services.</p> <p>This page will cover the steps after installing IPFS desktop to setup your instance for development and testing with the Web3 Geospatial Dashboard. Parts of this setup process is applicable to other applications as well (if you choose to build or use other apps).</p>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-ipfs-desktop/#install-ipfs-desktop","title":"Install IPFS Desktop","text":"<p>The installation process of getting IPFS desktop installed has been documented by the IPFS team. Follow the directions depending on which operating system you are working with:</p> <ol> <li>Windows</li> <li>macOS</li> <li>Ubuntu</li> </ol>"},{"location":"ecosystem/web3-geospatial-dashboard/how-to-setup-ipfs-desktop/#update-access-control-headers","title":"Update Access Control Headers","text":"<p>When editing the <code>Access-Control-Allow-Origin</code> list in your IPFS Config. You edit which domains can hit your node's IPFS Kubo RPC API. This API allows the node to be controlled through HTTP requests and has feature parity with both IPFS Desktop and the IPFS CLI. To access the access control header settings and your IPFS Config, navigate to the last section under the settings tab within IPFS Desktop:</p> <p></p> <p>As an example, say you wanted to grant <code>https://dashboard.easierdata.org</code> access to hit the Kubo RPC API, you would add it to the list:</p> <p>Before</p> <pre><code>{\n    \"API\": {\n        \"HTTPHeaders\": {\n            \"Access-Control-Allow-Origin\": [\n                \"https://webui.ipfs.io\",\n                \"http://webui.ipfs.io.ipns.localhost:8080\"\n            ]\n        }\n    }\n    ...\n}\n</code></pre> <p>After</p> <pre><code>{\n    \"API\": {\n        \"HTTPHeaders\": {\n            \"Access-Control-Allow-Origin\": [\n                \"https://webui.ipfs.io\",\n                \"http://webui.ipfs.io.ipns.localhost:8080\",\n                \"https://dashboard.easierdata.org\"\n            ]\n        }\n    }\n    ...\n}\n</code></pre> <p>To add other domains, simply repeat this process and change what is inserted with the domain of interest. Be sure to not tamper the default values. In the case you want all traffic to be accepted by your node, use the wildcard value: <code>*</code>. This is not recommended.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/prerequisites/","title":"Prerequisites","text":"<p>Before you begin working with the geospatial dashboard, ensure you have the following tools and software installed:</p> <ul> <li>Node.js (v20 or later) - Required to run the application</li> <li>Git - Required for cloning the repository</li> <li>Chrome - Required to load chrome extension</li> </ul>"},{"location":"ecosystem/web3-geospatial-dashboard/prerequisites/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li>Install Node.js</li> <li>Download and install from nodejs.org</li> <li> <p>Verify installation: <code>node --version</code></p> </li> <li> <p>Install Git</p> </li> <li>Download and install from git-scm.com</li> <li> <p>Verify installation: <code>git --version</code></p> </li> <li> <p>Install Chrome</p> </li> <li>Install the Chrome Browser if you have not already.</li> </ol>"},{"location":"ecosystem/web3-geospatial-dashboard/tech-stack/","title":"Tech Stack","text":"<p>The figure above showcases how all the components behind the dashboard are interconnected. Traversing the visual from left-to-right highlights how inputs connect to components on the backend. Users begin with pointing the dashboard to a STAC API enriched with IPFS and Filecoin metadata along with a Geojson. Upon entering these details, a map topology that parallels the inputted geojson is rendered. The map is configured to handle interactions from the user such as clicking on geometry, buttons on pop-ups, and more. The various interactions all trigger event listeners to communicate with the backend infrastructure to fetch the accompanying metadata and other details. Svelte accesses this metadata through three channels, kubo, the configured STAC API, and another API which poses as a middle man between the dashboard and other resources such as CID.Contact.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/veda/","title":"NASA Veda Support","text":"<p>The Visualization, Exploration, and Data Analysis (VEDA) project by NASA is a project built by the Earthdata team to support dataset processing, vusalization, and exploration. One of the key interests of the EASIER team is to enable the geospatial dashboard to seamlessly integrate with other projects in a loosely coupled manner. One way we have demonstrated this is the ability to export a dataset to VEDA frontmatter. The following will walk through the usage of this component.</p>"},{"location":"ecosystem/web3-geospatial-dashboard/veda/#component-overview","title":"Component Overview","text":"<p>When exporting a group of scenes from the Geospatial Dashboard to VEDA, first export the scenes to a configured IPFS Node. From there, with the scenes still selected, an \"Export to Veda Frontmatter\" button is visible. Clicking this button will bring up a popup with several required fields. As shown below:</p> <p></p> <p>The following fields are defined by the end user:</p> <ol> <li>Dataset ID</li> <li>Dataset Name</li> <li>Dataset Caption</li> <li>Dataset Description</li> </ol> <p>Currently, GeoJSON endpoint should be set to the STAC API URL used to view the scenes. Dataset endpoint should route to an IPFS gateway URL that references the CID of the data export. This can easily be retrieved through IPFS Desktop clicking on the three dots on the export under the \"Files\" tab and selecting \"Share link\".</p>"}]}